{"ast":null,"code":"import _asyncToGenerator from \"/Users/enginturan/Desktop/tuesday/Chorome-connect-extension/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { collection, query, onSnapshot, orderBy, addDoc, Timestamp } from 'firebase/firestore';\nimport { db } from '../firebase.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"scrollContainer\"];\nfunction ChatScreenComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r2.text);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 2, message_r2.createdAt.toDate(), \"shortTime\"));\n  }\n}\nexport class ChatScreenComponent {\n  constructor() {\n    this.messages = [];\n    this.newMessage = '';\n    this.isLoading = true;\n    this.fetchMessages();\n  }\n  fetchMessages() {\n    const messagesQuery = query(collection(db, 'messages'), orderBy('createdAt', 'asc'));\n    onSnapshot(messagesQuery, snapshot => {\n      this.messages = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      this.isLoading = false;\n      this.scrollToBottom();\n    }, error => {\n      console.error('Error fetching messages:', error);\n      this.isLoading = false;\n    });\n  }\n  sendMessage() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const messageText = _this.newMessage.trim();\n      if (!messageText) return;\n      try {\n        yield addDoc(collection(db, 'messages'), {\n          text: messageText,\n          createdAt: Timestamp.fromDate(new Date())\n        });\n        _this.newMessage = '';\n        _this.scrollToBottom();\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    })();\n  }\n  scrollToBottom() {\n    if (this.scrollContainer) {\n      setTimeout(() => {\n        this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;\n      }, 0);\n    }\n  }\n  ngAfterViewInit() {\n    this.scrollToBottom(); // Scroll to bottom after view initializes\n  }\n  static {\n    this.ɵfac = function ChatScreenComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ChatScreenComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatScreenComponent,\n      selectors: [[\"app-chat-screen\"]],\n      viewQuery: function ChatScreenComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 8,\n      vars: 2,\n      consts: [[\"scrollContainer\", \"\"], [1, \"chat-container\"], [1, \"messages\"], [\"class\", \"message\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-container\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 3, \"ngModelChange\", \"keyup.enter\", \"ngModel\"], [3, \"click\"], [1, \"message\"]],\n      template: function ChatScreenComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2, 0);\n          i0.ɵɵtemplate(3, ChatScreenComponent_div_3_Template, 6, 5, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 4)(5, \"input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ChatScreenComponent_Template_input_ngModelChange_5_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.newMessage, $event) || (ctx.newMessage = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵlistener(\"keyup.enter\", function ChatScreenComponent_Template_input_keyup_enter_5_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.sendMessage());\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function ChatScreenComponent_Template_button_click_6_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.sendMessage());\n          });\n          i0.ɵɵtext(7, \"Send\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.newMessage);\n        }\n      },\n      dependencies: [CommonModule, i1.NgForOf, i1.DatePipe, FormsModule, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n      styles: [\".chat-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n}\\n\\n.messages[_ngcontent-%COMP%] {\\n  flex: 1; \\n\\n  overflow-y: auto; \\n\\n  padding: 10px;\\n  background-color: #f9f9f9;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n}\\n\\n.message[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n  padding: 8px;\\n  background-color: #e9f5ff;\\n  border-radius: 5px;\\n}\\n.message[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 14px;\\n}\\n.message[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  font-size: 12px;\\n  color: #666;\\n  margin-top: 5px;\\n  display: block;\\n}\\n\\n.input-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 10px;\\n  padding: 10px;\\n  background-color: #f4f4f4;\\n  border-top: 1px solid #ddd;\\n}\\n.input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  flex: 1;\\n  padding: 10px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n}\\n.input-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  padding: 10px 15px;\\n  background-color: #007bff;\\n  color: #fff;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n}\\n.input-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\\n  background-color: #0056b3;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL2FuZ3VsYXIvc3JjL2FwcC9tb2R1bGVzL3NpZGUtcGFuZWwvY2hhdC1zZXJ2aWNlL2NoYXQtc2NyZWVuLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtBQUNKOztBQUVFO0VBQ0UsT0FBQSxFQUFBLDZCQUFBO0VBQ0EsZ0JBQUEsRUFBQSwrQkFBQTtFQUNBLGFBQUE7RUFDQSx5QkFBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7QUFDSjs7QUFFRTtFQUNFLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7QUFDSjtBQUNJO0VBQ0UsU0FBQTtFQUNBLGVBQUE7QUFDTjtBQUVJO0VBQ0UsZUFBQTtFQUNBLFdBQUE7RUFDQSxlQUFBO0VBQ0EsY0FBQTtBQUFOOztBQUlFO0VBQ0UsYUFBQTtFQUNBLFNBQUE7RUFDQSxhQUFBO0VBQ0EseUJBQUE7RUFDQSwwQkFBQTtBQURKO0FBR0k7RUFDRSxPQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7QUFETjtBQUlJO0VBQ0Usa0JBQUE7RUFDQSx5QkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0FBRk47QUFJTTtFQUNFLHlCQUFBO0FBRlIiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhdC1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbiAgXG4gIC5tZXNzYWdlcyB7XG4gICAgZmxleDogMTsgLyogT2NjdXBpZXMgYXZhaWxhYmxlIHNwYWNlICovXG4gICAgb3ZlcmZsb3cteTogYXV0bzsgLyogRW5hYmxlcyB2ZXJ0aWNhbCBzY3JvbGxpbmcgKi9cbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIH1cbiAgXG4gIC5tZXNzYWdlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIHBhZGRpbmc6IDhweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTlmNWZmO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgXG4gICAgcCB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBcbiAgICBzcGFuIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgIGNvbG9yOiAjNjY2O1xuICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICB9XG4gIFxuICAuaW5wdXQtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogMTBweDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNGY0ZjQ7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZGQ7XG4gIFxuICAgIGlucHV0IHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICB9XG4gIFxuICAgIGJ1dHRvbiB7XG4gICAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xuICAgICAgY29sb3I6ICNmZmY7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIFxuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDU2YjM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","FormsModule","collection","query","onSnapshot","orderBy","addDoc","Timestamp","db","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","message_r2","text","ɵɵpipeBind2","createdAt","toDate","ChatScreenComponent","constructor","messages","newMessage","isLoading","fetchMessages","messagesQuery","snapshot","docs","map","doc","id","data","scrollToBottom","error","console","sendMessage","_this","_asyncToGenerator","messageText","trim","fromDate","Date","scrollContainer","setTimeout","nativeElement","scrollTop","scrollHeight","ngAfterViewInit","selectors","viewQuery","ChatScreenComponent_Query","rf","ctx","ɵɵtemplate","ChatScreenComponent_div_3_Template","ɵɵtwoWayListener","ChatScreenComponent_Template_input_ngModelChange_5_listener","$event","ɵɵrestoreView","_r1","ɵɵtwoWayBindingSet","ɵɵresetView","ɵɵlistener","ChatScreenComponent_Template_input_keyup_enter_5_listener","ChatScreenComponent_Template_button_click_6_listener","ɵɵproperty","ɵɵtwoWayProperty","i1","NgForOf","DatePipe","i2","DefaultValueAccessor","NgControlStatus","NgModel","styles"],"sources":["/Users/enginturan/Desktop/tuesday/Chorome-connect-extension/angular/src/app/modules/side-panel/chat-service/chat-screen.component.ts","/Users/enginturan/Desktop/tuesday/Chorome-connect-extension/angular/src/app/modules/side-panel/chat-service/chat-screen.component.html"],"sourcesContent":["import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { collection, query, onSnapshot, orderBy, addDoc, Timestamp } from 'firebase/firestore';\nimport { db } from '../firebase.config';\n\ninterface Message {\n  id?: string;\n  text: string;\n  createdAt: Timestamp;\n}\n\n@Component({\n  selector: 'app-chat-screen',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './chat-screen.component.html',\n  styleUrls: ['./chat-screen.component.scss'],\n})\nexport class ChatScreenComponent implements AfterViewInit {\n  @ViewChild('scrollContainer') private scrollContainer!: ElementRef;\n\n  messages: Message[] = [];\n  newMessage = '';\n  isLoading = true;\n\n  constructor() {\n    this.fetchMessages();\n  }\n\n  fetchMessages() {\n    const messagesQuery = query(collection(db, 'messages'), orderBy('createdAt', 'asc'));\n    onSnapshot(\n      messagesQuery,\n      (snapshot) => {\n        this.messages = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        })) as Message[];\n        this.isLoading = false;\n        this.scrollToBottom();\n      },\n      (error) => {\n        console.error('Error fetching messages:', error);\n        this.isLoading = false;\n      }\n    );\n  }\n\n  async sendMessage() {\n    const messageText = this.newMessage.trim();\n    if (!messageText) return;\n\n    try {\n      await addDoc(collection(db, 'messages'), {\n        text: messageText,\n        createdAt: Timestamp.fromDate(new Date()),\n      });\n      this.newMessage = '';\n      this.scrollToBottom();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  scrollToBottom() {\n    if (this.scrollContainer) {\n      setTimeout(() => {\n        this.scrollContainer.nativeElement.scrollTop =\n          this.scrollContainer.nativeElement.scrollHeight;\n      }, 0);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.scrollToBottom(); // Scroll to bottom after view initializes\n  }\n}\n","<div class=\"chat-container\">\n    <div class=\"messages\" #scrollContainer>\n      <div *ngFor=\"let message of messages\" class=\"message\">\n        <p>{{ message.text }}</p>\n        <span>{{ message.createdAt.toDate() | date: 'shortTime' }}</span>\n      </div>\n    </div>\n  \n    <div class=\"input-container\">\n      <input\n        type=\"text\"\n        [(ngModel)]=\"newMessage\"\n        placeholder=\"Type a message...\"\n        (keyup.enter)=\"sendMessage()\"\n      />\n      <button (click)=\"sendMessage()\">Send</button>\n    </div>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}