{"ast":null,"code":"import _asyncToGenerator from \"/Users/enginturan/Desktop/tuesday/Chorome-connect-extension/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"1.0.10\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nclass DOMStorageWrapper {\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n  toString() {\n    return this.domStorage_.toString();\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n  remove(key) {\n    delete this.cache_[key];\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nconst log = function (...varArgs) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nconst logWrapper = function (prefix) {\n  return function (...varArgs) {\n    log(prefix, ...varArgs);\n  };\n};\nconst error = function (...varArgs) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\nconst warn = function (...varArgs) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\n * @returns {!number} comparison result.\n */\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a JavaScript Error\n */\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\n * Used to test for integer-looking strings\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (typeof timeout === 'number' &&\n  // @ts-ignore Is only defined in Deno environments.\n  typeof Deno !== 'undefined' &&\n  // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n  Deno['unrefTimer']) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n  addTokenChangeListener(listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n  removeTokenChangeListener(listener) {}\n  notifyForInvalidToken() {}\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class that holds metadata about a Repo object\n */\nclass RepoInfo {\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.isUsingEmulator = isUsingEmulator;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n  get host() {\n    return this._host;\n  }\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n  toString() {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Tracks a collection of stats.\n */\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n  incrementCounter(name, amount = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  }\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nclass PacketReceiver {\n  /**\n   * @param onMessage_\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\nclass BrowserPollConnection {\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage, onDisconnect) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n        const [command, arg1, arg2, arg3, arg4] = args;\n        this.incrementIncomingBytes_(args);\n        if (!this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n        if (this.connectTimeoutTimer_) {\n          clearTimeout(this.connectTimeoutTimer_);\n          this.connectTimeoutTimer_ = null;\n        }\n        this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          this.id = arg1;\n          this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            this.myPacketOrderer.closeAfter(arg1, () => {\n              this.onClosed_();\n            });\n          } else {\n            this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, (...args) => {\n        const [pN, data] = args;\n        this.incrementIncomingBytes_(args);\n        this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\n   * Triggered when this transport is closed\n   */\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\n   * Used to track the bytes received by this client\n   */\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n  /**\n   * @param commandCB - The callback to be called when control commands are received from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n    return iframe;\n  }\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  }\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\nclass WebSocketConnection {\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      let options;\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n  static isAvailable() {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n  appendFrame_(data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nclass TransportManager {\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nclass Connection {\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* RealtimeState.CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\n   * Starts a connection attempt\n   */\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n  onDataMessage_(message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = Object.assign({}, payload);\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* RealtimeState.CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  onConnectionLost_(everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  }\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  }\n  sendData_(data) {\n    if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n  merge(pathString, data, onComplete, hash) {}\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token) {}\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token) {}\n  onDisconnectPut(pathString, data, onComplete) {}\n  onDisconnectMerge(pathString, data, onComplete) {}\n  onDisconnectCancel(pathString, onComplete) {}\n  reportStats(stats) {}\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  trigger(eventType, ...varArgs) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nclass OnlineMonitor extends EventEmitter {\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n  constructor() {\n    super(['online']);\n    this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n  currentlyOnline() {\n    return this.online_;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nclass Path {\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  toString() {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  }\n}\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\nfunction pathSlice(path, begin = 0) {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nclass ValidationPath {\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass VisibilityMonitor extends EventEmitter {\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nclass PersistentConnection extends ServerActions {\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  }\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[/*data*/'d'];\n      const status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  }\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  }\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  }\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest( /*stats*/'s', request, result => {\n        const status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */'d'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  }\n  establishConnection_() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.shouldReconnect_()) {\n        _this.log_('Making a connection attempt');\n        _this.lastConnectionAttemptTime_ = new Date().getTime();\n        _this.lastConnectionEstablishedTime_ = null;\n        const onDataMessage = _this.onDataMessage_.bind(_this);\n        const onReady = _this.onReady_.bind(_this);\n        const onDisconnect = _this.onRealtimeDisconnect_.bind(_this);\n        const connId = _this.id + ':' + PersistentConnection.nextConnectionId_++;\n        const lastSessionId = _this.lastSessionId;\n        let canceled = false;\n        let connection = null;\n        const closeFn = function () {\n          if (connection) {\n            connection.close();\n          } else {\n            canceled = true;\n            onDisconnect();\n          }\n        };\n        const sendRequestFn = function (msg) {\n          assert(connection, \"sendRequest call when we're not connected not allowed.\");\n          connection.sendRequest(msg);\n        };\n        _this.realtime_ = {\n          close: closeFn,\n          sendRequest: sendRequestFn\n        };\n        const forceRefresh = _this.forceTokenRefresh_;\n        _this.forceTokenRefresh_ = false;\n        try {\n          // First fetch auth and app check token, and establish connection after\n          // fetching the token was successful\n          const [authToken, appCheckToken] = yield Promise.all([_this.authTokenProvider_.getToken(forceRefresh), _this.appCheckTokenProvider_.getToken(forceRefresh)]);\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            _this.authToken_ = authToken && authToken.accessToken;\n            _this.appCheckToken_ = appCheckToken && appCheckToken.token;\n            connection = new Connection(connId, _this.repoInfo_, _this.applicationId_, _this.appCheckToken_, _this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */reason => {\n              warn(reason + ' (' + _this.repoInfo_.toString() + ')');\n              _this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            }, lastSessionId);\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        } catch (error) {\n          _this.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (_this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        }\n      }\n    })();\n  }\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\n   * Sends client stats for first connection\n   */\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Index {\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString() {\n    return '.key';\n  }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An iterator over an LLRBNode.\n */\nclass SortedMapIterator {\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    let node = this.nodeStack_.pop();\n    let result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nclass LLRBNode {\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty() {\n    return false;\n  }\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\n   * @returns The minimum node in the tree.\n   */\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey() {\n    return this.min_().key;\n  }\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    let n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_() {\n    return this.color;\n  }\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  fixUp_() {\n    let n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  moveRedRight_() {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nclass LLRBEmptyNode {\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key, comparator) {\n    return this;\n  }\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count() {\n    return 0;\n  }\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty() {\n    return true;\n  }\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  check_() {\n    return 0;\n  }\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nclass SortedMap {\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key) {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key) {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count() {\n    return this.root_.count();\n  }\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nclass LeafNode {\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n  forEachChild(index, action) {\n    return false;\n  }\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue() {\n    return this.value_;\n  }\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex() {\n    return this;\n  }\n  isIndexed() {\n    return true;\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString() {\n    return '.priority';\n  }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nclass ChildrenNode {\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    const obj = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n  getPriority() {\n    return this;\n  }\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  isEmpty() {\n    return false;\n  }\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nfunction nodeFromJSON(json, priority = null) {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return true;\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString() {\n    return '.value';\n  }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* ChangeType.VALUE */,\n    snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* ChangeType.CHILD_ADDED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* ChangeType.CHILD_REMOVED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* ChangeType.CHILD_MOVED */,\n    snapshotNode,\n    childName\n  };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes() {\n    return false;\n  }\n  getIndexedFilter() {\n    return this;\n  }\n  getIndex() {\n    return this.index_;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  getStartPost() {\n    return this.startPost_;\n  }\n  getEndPost() {\n    return this.endPost_;\n  }\n  matches(node) {\n    const isWithinStart = this.startIsInclusive_ ? this.index_.compare(this.getStartPost(), node) <= 0 : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_ ? this.index_.compare(node, this.getEndPost()) <= 0 : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nclass LimitedFilter {\n  constructor(params) {\n    this.withinDirectionalStart = node => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n    this.withinDirectionalEnd = node => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n    this.withinStartPost = node => {\n      const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n      return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n    this.withinEndPost = node => {\n      const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n      return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange = count < this.limit_ && this.withinDirectionalStart(next) && this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex() {\n    return this.index_;\n  }\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false; // can only be true if startSet_ is true\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false; // can only be true if endSet_ is true\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  hasStart() {\n    return this.startSet_;\n  }\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    }\n  }\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_ ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */ : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_ ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */ : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n    obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] = !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n    obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] = !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n      }\n    }\n    obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nclass ReadonlyRestClient extends ServerActions {\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    this.log_ = logWrapper('p:rest:');\n    /**\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n     * that's been removed. :-/\n     */\n    this.listens_ = {};\n  }\n  /** @inheritDoc */\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    const pathString = query._path.toString();\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n  refreshAuthToken(token) {\n    // no-op since we just always call getToken.\n  }\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  restRequest_(pathString, queryStringParameters = {}, callback) {\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken( /*forceRefresh=*/false), this.appCheckTokenProvider_.getToken( /*forceRefresh=*/false)]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AckUserWrite {\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Merge {\n  constructor( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered() {\n    return this.filtered_;\n  }\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n  getNode() {\n    return this.node_;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nclass ImmutableTree {\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  constructor(value, children = EmptyChildren()) {\n    this.value = value;\n    this.children = children;\n  }\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ || type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ || type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ && oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ && oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ && oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n}\n/**\n * Singleton instance.\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  get query() {\n    return this.query_;\n  }\n}\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nclass SyncPoint {\n  constructor() {\n    /**\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\n     * queryId and the value is the View for that query.\n     *\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n     */\n    this.views = new Map();\n  }\n}\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n    return events;\n  }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nclass SyncTree {\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault = -1 !== removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n      const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag = null;\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(queryToRemove => {\n            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n  node() {\n    return this.node_;\n  }\n}\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n/**\n * Generate placeholders for deferred values.\n */\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nclass Tree {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(name = '', parent = null, node = {\n    children: {},\n    childCount: 0\n  }) {\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * True for invalid Firebase keys\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\n * @internal\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n     */\n    this.recursionDepth_ = 0;\n  }\n}\n/**\n * @param eventDataList - The new events to queue.\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n}\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    /**\n     * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n     * Add an event registration,\n     * Update data at the path,\n     * Raise any events,\n     * Cleanup the SyncTree\n     */\n    syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n    let events;\n    if (query._queryParams.loadsAllData()) {\n      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n    }\n    /*\n     * We need to raise events in the scenario where `get()` is called at a parent path, and\n     * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n     * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n     * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n     * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n     * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n     * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n     * ensure the corresponding child events will get fired.\n     */\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n    syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), (status, errorReason) => {\n    const success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoLog(repo, ...varArgs) {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        const error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* TransactionStatus.RUN */;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0 /* TransactionStatus.RUN */);\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* TransactionStatus.SENT */;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* TransactionStatus.RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0 /* TransactionStatus.RUN */;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString) {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Encapsulates the data needed to raise an event\n */\nclass DataEvent {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  getPath() {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType() {\n    return this.eventType;\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n}\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  getPath() {\n    return this.path;\n  }\n  getEventType() {\n    return 'cancel';\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass QueryImpl {\n  /**\n   * @hideconstructor\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\n * @internal\n */\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n  get root() {\n    let ref = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nclass DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(_node,\n  /**\n   * The location of this DataSnapshot.\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    const childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val() {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thenablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thenablePushRef.then = promise.then.bind(promise);\n  thenablePushRef.catch = promise.then.bind(promise, undefined);\n  return thenablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n}\n/**\n * Represents the registration of a child_x event.\n */\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    const index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  }\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint {}\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'endAt';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'endBefore';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'startAt';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAt(value = null, key) {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'startAfter';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n    this.type = 'limitToFirst';\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n    this.type = 'limitToLast';\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n    this.type = 'orderByChild';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  constructor() {\n    super(...arguments);\n    this.type = 'orderByKey';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  constructor() {\n    super(...arguments);\n    this.type = 'orderByPriority';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  constructor() {\n    super(...arguments);\n    this.type = 'orderByValue';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'equalTo';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nfunction query(query, ...queryConstraints) {\n  let queryImpl = getModularInstance(query);\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, /*isUsingEmulator=*/true);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nfunction getDatabase(app = getApp(), url) {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('database', (container, {\n    instanceIdentifier: url\n  }) => {\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor( /** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\n * @internal\n */\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n * @internal\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAppCheckImpl - custom app check implementation\n * @param customAuthImpl - custom auth implementation\n */\nfunction _initStandalone({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  customAppCheckImpl,\n  nodeAdmin = false\n}) {\n  setSDKVersion(version);\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const componentContainer = new ComponentContainer('database-standalone');\n  const authProvider = new Provider('auth-internal', componentContainer);\n  let appCheckProvider;\n  if (customAppCheckImpl) {\n    appCheckProvider = new Provider('app-check-internal', componentContainer);\n    appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  }\n  authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\n}\n\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"names":["_getProvider","getApp","SDK_VERSION","SDK_VERSION$1","_registerComponent","registerVersion","Component","ComponentContainer","Provider","stringify","jsonEval","contains","assert","isNodeSdk","stringToByteArray","Sha1","base64","deepCopy","base64Encode","isMobileCordova","stringLength","Deferred","safeGet","isAdmin","isValidFormat","isEmpty","isReactNative","assertionError","map","querystring","errorPrefix","getModularInstance","getDefaultEmulatorHostnameAndPort","createMockUserToken","Logger","LogLevel","name","version","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","Object","assign","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","getInstance","online_","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","request","p","q","_queryObject","outstandingGet","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","_this","_asyncToGenerator","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON$1","MAX_NODE$1","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","Default","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listens_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","referenceConstructor","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thenablePushRef","pushRef","setPriority","callbackContext","container","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","arguments","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","identifier","emulator","connectDatabaseEmulator","mockUserToken","goOffline","goOnline","enableLogging","registerDatabase","variant","instanceIdentifier","getProvider","setMultipleInstances","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut","_initStandalone","customAuthImpl","customAppCheckImpl","componentContainer","setComponent","_QueryImpl","_QueryParams","_ReferenceImpl","_TEST_ACCESS_forceRestClient","_TEST_ACCESS_hijackHash","_repoManagerDatabaseFromApp","_setSDKVersion","_validatePathString","_validateWritablePath"],"sources":["/Users/enginturan/Desktop/tuesday/Chorome-connect-extension/node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.10\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nfunction setSDKVersion(version) {\n    SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nclass DOMStorageWrapper {\n    /**\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    constructor(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param key - The key to save the value under\n     * @param value - The value being stored, or null to remove the key.\n     */\n    set(key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n        }\n    }\n    /**\n     * @returns The value that was stored under this key, or null\n     */\n    get(key) {\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return jsonEval(storedVal);\n        }\n    }\n    remove(key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    }\n    prefixedName_(name) {\n        return this.prefix_ + name;\n    }\n    toString() {\n        return this.domStorage_.toString();\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nclass MemoryStorage {\n    constructor() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    set(key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        }\n        else {\n            this.cache_[key] = value;\n        }\n    }\n    get(key) {\n        if (contains(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    }\n    remove(key) {\n        delete this.cache_[key];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' &&\n            typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            const domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper(domStorage);\n        }\n    }\n    catch (e) { }\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nconst LUIDGenerator = (function () {\n    let id = 1;\n    return function () {\n        return id++;\n    };\n})();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nconst sha1 = function (str) {\n    const utf8Bytes = stringToByteArray(str);\n    const sha1 = new Sha1();\n    sha1.update(utf8Bytes);\n    const sha1Bytes = sha1.digest();\n    return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n    let message = '';\n    for (let i = 0; i < varArgs.length; i++) {\n        const arg = varArgs[i];\n        if (Array.isArray(arg) ||\n            (arg &&\n                typeof arg === 'object' &&\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                typeof arg.length === 'number')) {\n            message += buildLogMessage_.apply(null, arg);\n        }\n        else if (typeof arg === 'object') {\n            message += stringify(arg);\n        }\n        else {\n            message += arg;\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nconst enableLogging$1 = function (logger_, persistent) {\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        logClient.logLevel = LogLevel.VERBOSE;\n        logger = logClient.log.bind(logClient);\n        if (persistent) {\n            SessionStorage.set('logging_enabled', true);\n        }\n    }\n    else if (typeof logger_ === 'function') {\n        logger = logger_;\n    }\n    else {\n        logger = null;\n        SessionStorage.remove('logging_enabled');\n    }\n};\nconst log = function (...varArgs) {\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\n            enableLogging$1(true);\n        }\n    }\n    if (logger) {\n        const message = buildLogMessage_.apply(null, varArgs);\n        logger(message);\n    }\n};\nconst logWrapper = function (prefix) {\n    return function (...varArgs) {\n        log(prefix, ...varArgs);\n    };\n};\nconst error = function (...varArgs) {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n    logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n    logClient.error(message);\n    throw new Error(message);\n};\nconst warn = function (...varArgs) {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n    logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nconst warnIfPageIsSecure = function () {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' &&\n        window.location &&\n        window.location.protocol &&\n        window.location.protocol.indexOf('https:') !== -1) {\n        warn('Insecure Firebase access from a secure page. ' +\n            'Please use https in calls to new Firebase().');\n    }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nconst isInvalidJSONNumber = function (data) {\n    return (typeof data === 'number' &&\n        (data !== data || // NaN\n            data === Number.POSITIVE_INFINITY ||\n            data === Number.NEGATIVE_INFINITY));\n};\nconst executeWhenDOMReady = function (fn) {\n    if (isNodeSdk() || document.readyState === 'complete') {\n        fn();\n    }\n    else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        let called = false;\n        const wrappedFn = function () {\n            if (!document.body) {\n                setTimeout(wrappedFn, Math.floor(10));\n                return;\n            }\n            if (!called) {\n                called = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn, false);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (document.attachEvent) {\n            // IE.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            document.attachEvent('onreadystatechange', () => {\n                if (document.readyState === 'complete') {\n                    wrappedFn();\n                }\n            });\n            // fallback to onload.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            window.attachEvent('onload', wrappedFn);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nconst nameCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a === MIN_NAME || b === MAX_NAME) {\n        return -1;\n    }\n    else if (b === MIN_NAME || a === MAX_NAME) {\n        return 1;\n    }\n    else {\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (bAsInt !== null) {\n            return 1;\n        }\n        else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\n * @returns {!number} comparison result.\n */\nconst stringCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a < b) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n};\nconst requireKey = function (key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    }\n    else {\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n    }\n};\nconst ObjectToUniqueKey = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return stringify(obj);\n    }\n    const keys = [];\n    // eslint-disable-next-line guard-for-in\n    for (const k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    let key = '{';\n    for (let i = 0; i < keys.length; i++) {\n        if (i !== 0) {\n            key += ',';\n        }\n        key += stringify(keys[i]);\n        key += ':';\n        key += ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nconst splitStringBySize = function (str, segsize) {\n    const len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    const dataSegs = [];\n    for (let c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        }\n        else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nfunction each(obj, fn) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nconst doubleToIEEE754String = function (v) {\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    const ebits = 11, fbits = 52;\n    const bias = (1 << (ebits - 1)) - 1;\n    let s, e, f, ln, i;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    }\n    else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        }\n        else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    const str = bits.join('');\n    // Return the data as a hex string. --MJL\n    let hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1) {\n            hexByte = '0' + hexByte;\n        }\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nconst isChromeExtensionContentScript = function () {\n    return !!(typeof window === 'object' &&\n        window['chrome'] &&\n        window['chrome']['extension'] &&\n        !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nconst isWindowsStoreApp = function () {\n    // Check for the presence of a couple WinRT globals\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a JavaScript Error\n */\nfunction errorForServerCode(code, query) {\n    let reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason =\n            'The data requested exceeds the maximum size ' +\n                'that can be accessed with a single request.';\n    }\n    else if (code === 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    }\n    else if (code === 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error.code = code.toUpperCase();\n    return error;\n}\n/**\n * Used to test for integer-looking strings\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nconst tryParseInt = function (str) {\n    if (INTEGER_REGEXP_.test(str)) {\n        const intVal = Number(str);\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nconst exceptionGuard = function (fn) {\n    try {\n        fn();\n    }\n    catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(() => {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            const stack = e.stack || '';\n            warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nconst beingCrawled = function () {\n    const userAgent = (typeof window === 'object' &&\n        window['navigator'] &&\n        window['navigator']['userAgent']) ||\n        '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n    const timeout = setTimeout(fn, time);\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n    if (typeof timeout === 'number' &&\n        // @ts-ignore Is only defined in Deno environments.\n        typeof Deno !== 'undefined' &&\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno['unrefTimer']) {\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno.unrefTimer(timeout);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }\n    else if (typeof timeout === 'object' && timeout['unref']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nclass AppCheckTokenProvider {\n    constructor(appName_, appCheckProvider) {\n        this.appName_ = appName_;\n        this.appCheckProvider = appCheckProvider;\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\n        if (!this.appCheck) {\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.appCheck) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAppCheck. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // AppCheck and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.appCheck) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.appCheck.getToken(forceRefresh);\n    }\n    addTokenChangeListener(listener) {\n        var _a;\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n            'are invalid. This usually indicates your app was not initialized correctly.');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nclass FirebaseAuthTokenProvider {\n    constructor(appName_, firebaseOptions_, authProvider_) {\n        this.appName_ = appName_;\n        this.firebaseOptions_ = firebaseOptions_;\n        this.authProvider_ = authProvider_;\n        this.auth_ = null;\n        this.auth_ = authProvider_.getImmediate({ optional: true });\n        if (!this.auth_) {\n            authProvider_.onInit(auth => (this.auth_ = auth));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.auth_) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAuth. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // Auth and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.auth_) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.auth_.getToken(forceRefresh).catch(error => {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    }\n    addTokenChangeListener(listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        if (this.auth_) {\n            this.auth_.addAuthTokenListener(listener);\n        }\n        else {\n            this.authProvider_\n                .get()\n                .then(auth => auth.addAuthTokenListener(listener));\n        }\n    }\n    removeTokenChangeListener(listener) {\n        this.authProvider_\n            .get()\n            .then(auth => auth.removeAuthTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.appName_ +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        warn(errorMessage);\n    }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n    constructor(accessToken) {\n        this.accessToken = accessToken;\n    }\n    getToken(forceRefresh) {\n        return Promise.resolve({\n            accessToken: this.accessToken\n        });\n    }\n    addTokenChangeListener(listener) {\n        // Invoke the listener immediately to match the behavior in Firebase Auth\n        // (see packages/auth/src/auth.js#L1807)\n        listener(this.accessToken);\n    }\n    removeTokenChangeListener(listener) { }\n    notifyForInvalidToken() { }\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class that holds metadata about a Repo object\n */\nclass RepoInfo {\n    /**\n     * @param host - Hostname portion of the url for the repo\n     * @param secure - Whether or not this repo is accessed over ssl\n     * @param namespace - The namespace represented by the repo\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n     * @param persistenceKey - Override the default session persistence storage key\n     */\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.nodeAdmin = nodeAdmin;\n        this.persistenceKey = persistenceKey;\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n        this.isUsingEmulator = isUsingEmulator;\n        this._host = host.toLowerCase();\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\n        this.internalHost =\n            PersistentStorage.get('host:' + host) || this._host;\n    }\n    isCacheableHost() {\n        return this.internalHost.substr(0, 2) === 's-';\n    }\n    isCustomHost() {\n        return (this._domain !== 'firebaseio.com' &&\n            this._domain !== 'firebaseio-demo.com');\n    }\n    get host() {\n        return this._host;\n    }\n    set host(newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                PersistentStorage.set('host:' + this._host, this.internalHost);\n            }\n        }\n    }\n    toString() {\n        let str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    }\n    toURLString() {\n        const protocol = this.secure ? 'https://' : 'http://';\n        const query = this.includeNamespaceInQueryParams\n            ? `?ns=${this.namespace}`\n            : '';\n        return `${protocol}${this.host}/${query}`;\n    }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n    return (repoInfo.host !== repoInfo.internalHost ||\n        repoInfo.isCustomHost() ||\n        repoInfo.includeNamespaceInQueryParams);\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n    let connURL;\n    if (type === WEBSOCKET) {\n        connURL =\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n    }\n    else if (type === LONG_POLLING) {\n        connURL =\n            (repoInfo.secure ? 'https://' : 'http://') +\n                repoInfo.internalHost +\n                '/.lp?';\n    }\n    else {\n        throw new Error('Unknown connection type: ' + type);\n    }\n    if (repoInfoNeedsQueryParam(repoInfo)) {\n        params['ns'] = repoInfo.namespace;\n    }\n    const pairs = [];\n    each(params, (key, value) => {\n        pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Tracks a collection of stats.\n */\nclass StatsCollection {\n    constructor() {\n        this.counters_ = {};\n    }\n    incrementCounter(name, amount = 1) {\n        if (!contains(this.counters_, name)) {\n            this.counters_[name] = 0;\n        }\n        this.counters_[name] += amount;\n    }\n    get() {\n        return deepCopy(this.counters_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n    const hashString = repoInfo.toString();\n    if (!collections[hashString]) {\n        collections[hashString] = new StatsCollection();\n    }\n    return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n    const hashString = repoInfo.toString();\n    if (!reporters[hashString]) {\n        reporters[hashString] = creatorFunction();\n    }\n    return reporters[hashString];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nclass PacketReceiver {\n    /**\n     * @param onMessage_\n     */\n    constructor(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    closeAfter(responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    }\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     */\n    handleResponse(requestNum, data) {\n        this.pendingResponses[requestNum] = data;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            const toProcess = this.pendingResponses[this.currentResponseNum];\n            delete this.pendingResponses[this.currentResponseNum];\n            for (let i = 0; i < toProcess.length; ++i) {\n                if (toProcess[i]) {\n                    exceptionGuard(() => {\n                        this.onMessage_(toProcess[i]);\n                    });\n                }\n            }\n            if (this.currentResponseNum === this.closeAfterResponse) {\n                if (this.onClose) {\n                    this.onClose();\n                    this.onClose = null;\n                }\n                break;\n            }\n            this.currentResponseNum++;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\nclass BrowserPollConnection {\n    /**\n     * @param connId An identifier for this connection, used for logging\n     * @param repoInfo The info for the endpoint to send data to.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The AppCheck token for this client.\n     * @param authToken The AuthToken to use for this connection.\n     * @param transportSessionId Optional transportSessionid if we are\n     * reconnecting for an existing transport session\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n     * already created a connection previously\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = logWrapper(connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.urlFn = (params) => {\n            // Always add the token if we have one.\n            if (this.appCheckToken) {\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n        };\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(() => {\n            this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            this.onClosed_();\n            this.connectTimeoutTimer_ = null;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        executeWhenDOMReady(() => {\n            if (this.isClosed_) {\n                return;\n            }\n            //Set up a callback that gets triggered once a connection is set up.\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n                const [command, arg1, arg2, arg3, arg4] = args;\n                this.incrementIncomingBytes_(args);\n                if (!this.scriptTagHolder) {\n                    return; // we closed the connection.\n                }\n                if (this.connectTimeoutTimer_) {\n                    clearTimeout(this.connectTimeoutTimer_);\n                    this.connectTimeoutTimer_ = null;\n                }\n                this.everConnected_ = true;\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\n                    this.id = arg1;\n                    this.password = arg2;\n                }\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        this.myPacketOrderer.closeAfter(arg1, () => {\n                            this.onClosed_();\n                        });\n                    }\n                    else {\n                        this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, (...args) => {\n                const [pN, data] = args;\n                this.incrementIncomingBytes_(args);\n                this.myPacketOrderer.handleResponse(pN, data);\n            }, () => {\n                this.onClosed_();\n            }, this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\n            }\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n            if (this.transportSessionId) {\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n            }\n            if (this.lastSessionId) {\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n            }\n            if (this.applicationId) {\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n            }\n            if (this.appCheckToken) {\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            if (typeof location !== 'undefined' &&\n                location.hostname &&\n                FORGE_DOMAIN_RE.test(location.hostname)) {\n                urlParams[REFERER_PARAM] = FORGE_REF;\n            }\n            const connectURL = this.urlFn(urlParams);\n            this.log_('Connecting via long-poll to ' + connectURL);\n            this.scriptTagHolder.addTag(connectURL, () => {\n                /* do nothing */\n            });\n        });\n    }\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    start() {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    }\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    static forceAllow() {\n        BrowserPollConnection.forceAllow_ = true;\n    }\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    static forceDisallow() {\n        BrowserPollConnection.forceDisallow_ = true;\n    }\n    // Static method, use string literal so it can be accessed in a generic way\n    static isAvailable() {\n        if (isNodeSdk()) {\n            return false;\n        }\n        else if (BrowserPollConnection.forceAllow_) {\n            return true;\n        }\n        else {\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n            return (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !isChromeExtensionContentScript() &&\n                !isWindowsStoreApp());\n        }\n    }\n    /**\n     * No-op for polling\n     */\n    markConnectionHealthy() { }\n    /**\n     * Stops polling and cleans up the iframe\n     */\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    }\n    /**\n     * Triggered when this transport is closed\n     */\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param data - The JSON data to transmit.\n     */\n    send(data) {\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        const base64data = base64Encode(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    }\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     */\n    addDisconnectPingFrame(id, pw) {\n        if (isNodeSdk()) {\n            return;\n        }\n        this.myDisconnFrame = document.createElement('iframe');\n        const urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    }\n    /**\n     * Used to track the bytes received by this client\n     */\n    incrementIncomingBytes_(args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        const bytesReceived = stringify(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    }\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n    /**\n     * @param commandCB - The callback to be called when control commands are received from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        this.outstandingRequests = new Set();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!isNodeSdk()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = LUIDGenerator();\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n                onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            let script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                const currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            const iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                log('frame writing exception');\n                if (e.stack) {\n                    log(e.stack);\n                }\n                log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     */\n    static createIFrame_() {\n        const iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                const a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                const domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (iframe.document) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    }\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    close() {\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n            this.myIFrame.doc.body.textContent = '';\n            setTimeout(() => {\n                if (this.myIFrame !== null) {\n                    document.body.removeChild(this.myIFrame);\n                    this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        // Protect from being called recursively.\n        const onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    }\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param id - The ID of this connection\n     * @param pw - The password for this connection\n     */\n    startLongPoll(id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    }\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    newRequest_() {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            let theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            let curDataString = '';\n            let i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                const nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length +\n                    SEG_HEADER_SIZE +\n                    curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    const theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    enqueueSegment(segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    }\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param url - The URL of the script tag.\n     * @param serial - The serial number of the request.\n     */\n    addLongPollTag_(url, serial) {\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial);\n        const doNewRequest = () => {\n            this.outstandingRequests.delete(serial);\n            this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        const readyStateCB = () => {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    }\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param url - The URL for the script tag source.\n     * @param loadCB - A callback to be triggered once the script has loaded.\n     */\n    addTag(url, loadCB) {\n        if (isNodeSdk()) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(() => {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!this.sendNewPolls) {\n                        return;\n                    }\n                    const newScript = this.myIFrame.doc.createElement('script');\n                    newScript.type = 'text/javascript';\n                    newScript.async = true;\n                    newScript.src = url;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    newScript.onload = newScript.onreadystatechange =\n                        function () {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            const rstate = newScript.readyState;\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                newScript.onload = newScript.onreadystatechange = null;\n                                if (newScript.parentNode) {\n                                    newScript.parentNode.removeChild(newScript);\n                                }\n                                loadCB();\n                            }\n                        };\n                    newScript.onerror = () => {\n                        log('Long-poll script failed to load: ' + url);\n                        this.sendNewPolls = false;\n                        this.close();\n                    };\n                    this.myIFrame.doc.body.appendChild(newScript);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n}\nelse if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\nclass WebSocketConnection {\n    /**\n     * @param connId identifier for this transport\n     * @param repoInfo The info for the websocket endpoint.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The App Check Token for this client.\n     * @param authToken The Auth Token for this client.\n     * @param transportSessionId Optional transportSessionId if this is connecting\n     * to an existing transport session\n     * @param lastSessionId Optional lastSessionId if there was a previous\n     * connection\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = logWrapper(this.connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n        this.nodeAdmin = repoInfo.nodeAdmin;\n    }\n    /**\n     * @param repoInfo - The info for the websocket endpoint.\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\n     * @returns connection url\n     */\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n        const urlParams = {};\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n        if (!isNodeSdk() &&\n            typeof location !== 'undefined' &&\n            location.hostname &&\n            FORGE_DOMAIN_RE.test(location.hostname)) {\n            urlParams[REFERER_PARAM] = FORGE_REF;\n        }\n        if (transportSessionId) {\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\n        }\n        if (appCheckToken) {\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n        }\n        if (applicationId) {\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\n        }\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        PersistentStorage.set('previous_websocket_failure', true);\n        try {\n            let options;\n            if (isNodeSdk()) {\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                options = {\n                    headers: {\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n                        'X-Firebase-GMPID': this.applicationId || ''\n                    }\n                };\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\n                // Note that we send the credentials here even if they aren't admin credentials, which is\n                // not a problem.\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\n                // through the websocket connection once it is established.\n                if (this.authToken) {\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\n                }\n                if (this.appCheckToken) {\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n                }\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                const env = process['env'];\n                const proxy = this.connURL.indexOf('wss://') === 0\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\n                    : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n            }\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\n        }\n        catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = () => {\n            this.log_('Websocket connected.');\n            this.everConnected_ = true;\n        };\n        this.mySock.onclose = () => {\n            this.log_('Websocket connection was disconnected.');\n            this.mySock = null;\n            this.onClosed_();\n        };\n        this.mySock.onmessage = m => {\n            this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = e => {\n            this.log_('WebSocket error.  Closing connection.');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n        };\n    }\n    /**\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n     */\n    start() { }\n    static forceDisallow() {\n        WebSocketConnection.forceDisallow_ = true;\n    }\n    static isAvailable() {\n        let isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return (!isOldAndroid &&\n            WebSocketImpl !== null &&\n            !WebSocketConnection.forceDisallow_);\n    }\n    /**\n     * Returns true if we previously failed to connect with this transport.\n     */\n    static previouslyFailed() {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return (PersistentStorage.isInMemoryStorage ||\n            PersistentStorage.get('previous_websocket_failure') === true);\n    }\n    markConnectionHealthy() {\n        PersistentStorage.remove('previous_websocket_failure');\n    }\n    appendFrame_(data) {\n        this.frames.push(data);\n        if (this.frames.length === this.totalFrames) {\n            const fullMess = this.frames.join('');\n            this.frames = null;\n            const jsonMess = jsonEval(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    }\n    /**\n     * @param frameCount - The number of frames we are expecting from the server\n     */\n    handleNewFrameCount_(frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    }\n    /**\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n     * @returns Any remaining data to be process, or null if there is none\n     */\n    extractFrameCount_(data) {\n        assert(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            const frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    }\n    /**\n     * Process a websocket frame that has arrived from the server.\n     * @param mess - The frame data\n     */\n    handleIncomingFrame(mess) {\n        if (this.mySock === null) {\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        }\n        const data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        }\n        else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            const remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    }\n    /**\n     * Send a message to the server\n     * @param data - The JSON object to transmit\n     */\n    send(data) {\n        this.resetKeepAlive();\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    }\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    }\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler.\n     * Close the websocket and kill the connection.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n     * the last activity.\n     */\n    resetKeepAlive() {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(() => {\n            //If there has been no websocket activity for a while, send a no-op\n            if (this.mySock) {\n                this.sendString_('0');\n            }\n            this.resetKeepAlive();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\n     * Send a string over the websocket.\n     *\n     * @param str - String to send.\n     */\n    sendString_(str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        }\n        catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    }\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nclass TransportManager {\n    static get ALL_TRANSPORTS() {\n        return [BrowserPollConnection, WebSocketConnection];\n    }\n    /**\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n     * TransportManager has already set up transports_\n     */\n    static get IS_TRANSPORT_INITIALIZED() {\n        return this.globalTransportInitialized_;\n    }\n    /**\n     * @param repoInfo - Metadata around the namespace we're connecting to\n     */\n    constructor(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    initTransports_(repoInfo) {\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable) {\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            }\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection];\n        }\n        else {\n            const transports = (this.transports_ = []);\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\n                if (transport && transport['isAvailable']()) {\n                    transports.push(transport);\n                }\n            }\n            TransportManager.globalTransportInitialized_ = true;\n        }\n    }\n    /**\n     * @returns The constructor for the initial transport to use\n     */\n    initialTransport() {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    }\n    /**\n     * @returns The constructor for the next transport, or null\n     */\n    upgradeTransport() {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nclass Connection {\n    /**\n     * @param id - an id for this connection\n     * @param repoInfo_ - the info for the endpoint to connect to\n     * @param applicationId_ - the Firebase App ID for this project\n     * @param appCheckToken_ - The App Check Token for this device.\n     * @param authToken_ - The auth token for this session.\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n     */\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.appCheckToken_ = appCheckToken_;\n        this.authToken_ = authToken_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\n        this.log_ = logWrapper('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\n     * Starts a connection attempt\n     */\n    start_() {\n        const conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessageReceived = this.connReceiver_(this.conn_);\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n         * still have the context of your originating frame.\n         */\n        setTimeout(() => {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n        if (healthyTimeoutMS > 0) {\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n                this.healthyTimeout_ = null;\n                if (!this.isHealthy_) {\n                    if (this.conn_ &&\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has received ' +\n                            this.conn_.bytesReceived +\n                            ' bytes.  Marking connection healthy.');\n                        this.isHealthy_ = true;\n                        this.conn_.markConnectionHealthy();\n                    }\n                    else if (this.conn_ &&\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\n                            this.conn_.bytesSent +\n                            ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    }\n                    else {\n                        this.log_('Closing unhealthy connection after timeout.');\n                        this.close();\n                    }\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }, Math.floor(healthyTimeoutMS));\n        }\n    }\n    nextTransportId_() {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    }\n    disconnReceiver_(conn) {\n        return everConnected => {\n            if (conn === this.conn_) {\n                this.onConnectionLost_(everConnected);\n            }\n            else if (conn === this.secondaryConn_) {\n                this.log_('Secondary connection lost.');\n                this.onSecondaryConnectionLost_();\n            }\n            else {\n                this.log_('closing an old connection');\n            }\n        };\n    }\n    connReceiver_(conn) {\n        return (message) => {\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n                if (conn === this.rx_) {\n                    this.onPrimaryMessageReceived_(message);\n                }\n                else if (conn === this.secondaryConn_) {\n                    this.onSecondaryMessageReceived_(message);\n                }\n                else {\n                    this.log_('message on old connection');\n                }\n            }\n        };\n    }\n    /**\n     * @param dataMsg - An arbitrary data message to be sent to the server\n     */\n    sendRequest(dataMsg) {\n        // wrap in a data message envelope and send it on\n        const msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    }\n    tryCleanupConnection() {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    }\n    onSecondaryControl_(controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            const cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            }\n            else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ ||\n                    this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    }\n    onSecondaryMessageReceived_(parsedData) {\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onSecondaryControl_(data);\n        }\n        else if (layer === 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        }\n        else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    }\n    upgradeIfSecondaryHealthy_() {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        }\n        else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    proceedWithUpgrade_() {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    }\n    onPrimaryMessageReceived_(parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onControl_(data);\n        }\n        else if (layer === 'd') {\n            this.onDataMessage_(data);\n        }\n    }\n    onDataMessage_(message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    }\n    onPrimaryResponse_() {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    }\n    onControl_(controlData) {\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            const payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                const handshakePayload = Object.assign({}, payload);\n                if (this.repoInfo_.isUsingEmulator) {\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n                    handshakePayload.h = this.repoInfo_.host;\n                }\n                this.onHandshake_(handshakePayload);\n            }\n            else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            }\n            else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            }\n            else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            }\n            else if (cmd === CONTROL_ERROR) {\n                error('Server Error: ' + payload);\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            }\n            else {\n                error('Unknown control packet command: ' + cmd);\n            }\n        }\n    }\n    /**\n     * @param handshake - The handshake data returned from the server\n     */\n    onHandshake_(handshake) {\n        const timestamp = handshake.ts;\n        const version = handshake.v;\n        const host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.host = host;\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.conn_.start();\n            this.onConnectionEstablished_(this.conn_, timestamp);\n            if (PROTOCOL_VERSION !== version) {\n                warn('Protocol version mismatch detected');\n            }\n            // TODO: do we want to upgrade? when? maybe a delay?\n            this.tryStartUpgrade_();\n        }\n    }\n    tryStartUpgrade_() {\n        const conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    }\n    startUpgrade_(conn) {\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ =\n            conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessage = this.connReceiver_(this.secondaryConn_);\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        setTimeoutNonBlocking(() => {\n            if (this.secondaryConn_) {\n                this.log_('Timed out trying to upgrade.');\n                this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    }\n    onReset_(host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.host = host;\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.close();\n        }\n        else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    }\n    onConnectionEstablished_(conn, timestamp) {\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        }\n        else {\n            setTimeoutNonBlocking(() => {\n                this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    }\n    sendPingOnPrimaryIfNecessary_() {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('sending ping on primary.');\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    onSecondaryConnectionLost_() {\n        const conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    }\n    /**\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n     * we should flush the host cache\n     */\n    onConnectionLost_(everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.log_('Realtime connection failed.');\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n            if (this.repoInfo_.isCacheableHost()) {\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                this.repoInfo_.internalHost = this.repoInfo_.host;\n            }\n        }\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('Realtime connection lost.');\n        }\n        this.close();\n    }\n    onConnectionShutdown_(reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    }\n    sendData_(data) {\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n            throw 'Connection is not connected';\n        }\n        else {\n            this.tx_.send(data);\n        }\n    }\n    /**\n     * Cleans up this connection, calling the appropriate callbacks\n     */\n    close() {\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n            this.log_('Closing realtime connection.');\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n            this.closeConnections_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_();\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    closeConnections_() {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nclass ServerActions {\n    put(pathString, data, onComplete, hash) { }\n    merge(pathString, data, onComplete, hash) { }\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param token - The authentication token\n     */\n    refreshAuthToken(token) { }\n    /**\n     * Refreshes the app check token for the current connection.\n     * @param token The app check token\n     */\n    refreshAppCheckToken(token) { }\n    onDisconnectPut(pathString, data, onComplete) { }\n    onDisconnectMerge(pathString, data, onComplete) { }\n    onDisconnectCancel(pathString, onComplete) { }\n    reportStats(stats) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nclass EventEmitter {\n    constructor(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     */\n    trigger(eventType, ...varArgs) {\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            const listeners = [...this.listeners_[eventType]];\n            for (let i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, varArgs);\n            }\n        }\n    }\n    on(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback, context });\n        const eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    }\n    off(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        const listeners = this.listeners_[eventType] || [];\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback &&\n                (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    }\n    validateEventType_(eventType) {\n        assert(this.allowedEvents_.find(et => {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nclass OnlineMonitor extends EventEmitter {\n    static getInstance() {\n        return new OnlineMonitor();\n    }\n    constructor() {\n        super(['online']);\n        this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener !== 'undefined' &&\n            !isMobileCordova()) {\n            window.addEventListener('online', () => {\n                if (!this.online_) {\n                    this.online_ = true;\n                    this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', () => {\n                if (this.online_) {\n                    this.online_ = false;\n                    this.trigger('online', false);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    }\n    currentlyOnline() {\n        return this.online_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nclass Path {\n    /**\n     * @param pathOrString - Path string to parse, or another path, or the raw\n     * tokens array\n     */\n    constructor(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            let copyTo = 0;\n            for (let i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        }\n        else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    toString() {\n        let pathString = '';\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') {\n                pathString += '/' + this.pieces_[i];\n            }\n        }\n        return pathString || '/';\n    }\n}\nfunction newEmptyPath() {\n    return new Path('');\n}\nfunction pathGetFront(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\nfunction pathGetLength(path) {\n    return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n    let pieceNum = path.pieceNum_;\n    if (pieceNum < path.pieces_.length) {\n        pieceNum++;\n    }\n    return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n    if (path.pieceNum_ < path.pieces_.length) {\n        return path.pieces_[path.pieces_.length - 1];\n    }\n    return null;\n}\nfunction pathToUrlEncodedString(path) {\n    let pathString = '';\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        if (path.pieces_[i] !== '') {\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n        }\n    }\n    return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\nfunction pathSlice(path, begin = 0) {\n    return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    if (childPathObj instanceof Path) {\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n            pieces.push(childPathObj.pieces_[i]);\n        }\n    }\n    else {\n        const childPieces = childPathObj.split('/');\n        for (let i = 0; i < childPieces.length; i++) {\n            if (childPieces[i].length > 0) {\n                pieces.push(childPieces[i]);\n            }\n        }\n    }\n    return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\nfunction pathIsEmpty(path) {\n    return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\nfunction newRelativePath(outerPath, innerPath) {\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\n    if (outer === null) {\n        return innerPath;\n    }\n    else if (outer === inner) {\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n    }\n    else {\n        throw new Error('INTERNAL ERROR: innerPath (' +\n            innerPath +\n            ') is not within ' +\n            'outerPath (' +\n            outerPath +\n            ')');\n    }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nfunction pathCompare(left, right) {\n    const leftKeys = pathSlice(left, 0);\n    const rightKeys = pathSlice(right, 0);\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    if (leftKeys.length === rightKeys.length) {\n        return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\nfunction pathEquals(path, other) {\n    if (pathGetLength(path) !== pathGetLength(other)) {\n        return false;\n    }\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nfunction pathContains(path, other) {\n    let i = path.pieceNum_;\n    let j = other.pieceNum_;\n    if (pathGetLength(path) > pathGetLength(other)) {\n        return false;\n    }\n    while (i < path.pieces_.length) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n        ++i;\n        ++j;\n    }\n    return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nclass ValidationPath {\n    /**\n     * @param path - Initial Path.\n     * @param errorPrefix_ - Prefix for any error messages.\n     */\n    constructor(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        this.parts_ = pathSlice(path, 0);\n        /** Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (let i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += stringLength(this.parts_[i]);\n        }\n        validationPathCheckValid(this);\n    }\n}\nfunction validationPathPush(validationPath, child) {\n    // Count the needed '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ += 1;\n    }\n    validationPath.parts_.push(child);\n    validationPath.byteLength_ += stringLength(child);\n    validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n    const last = validationPath.parts_.pop();\n    validationPath.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ -= 1;\n    }\n}\nfunction validationPathCheckValid(validationPath) {\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n        throw new Error(validationPath.errorPrefix_ +\n            'has a key path longer than ' +\n            MAX_PATH_LENGTH_BYTES +\n            ' bytes (' +\n            validationPath.byteLength_ +\n            ').');\n    }\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n        throw new Error(validationPath.errorPrefix_ +\n            'path specified exceeds the maximum depth that can be written (' +\n            MAX_PATH_DEPTH +\n            ') or object contains a cycle ' +\n            validationPathToErrorString(validationPath));\n    }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nfunction validationPathToErrorString(validationPath) {\n    if (validationPath.parts_.length === 0) {\n        return '';\n    }\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass VisibilityMonitor extends EventEmitter {\n    static getInstance() {\n        return new VisibilityMonitor();\n    }\n    constructor() {\n        super(['visible']);\n        let hidden;\n        let visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, () => {\n                const visible = !document[hidden];\n                if (visible !== this.visible_) {\n                    this.visible_ = visible;\n                    this.trigger('visible', visible);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nclass PersistentConnection extends ServerActions {\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param applicationId_ - The Firebase App ID for this project\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.onConnectStatus_ = onConnectStatus_;\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\n        this.log_ = logWrapper('p:' + this.id + ':');\n        this.interruptReasons_ = {};\n        this.listens = new Map();\n        this.outstandingPuts_ = [];\n        this.outstandingGets_ = [];\n        this.outstandingPutCount_ = 0;\n        this.outstandingGetCount_ = 0;\n        this.onDisconnectRequestQueue_ = [];\n        this.connected_ = false;\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        this.securityDebugCallback_ = null;\n        this.lastSessionId = null;\n        this.establishConnectionTimer_ = null;\n        this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        this.requestCBHash_ = {};\n        this.requestNumber_ = 0;\n        this.realtime_ = null;\n        this.authToken_ = null;\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = false;\n        this.invalidAuthTokenCount_ = 0;\n        this.invalidAppCheckTokenCount_ = 0;\n        this.firstConnection_ = true;\n        this.lastConnectionAttemptTime_ = null;\n        this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !isNodeSdk()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n        }\n    }\n    sendRequest(action, body, onResponse) {\n        const curReqNum = ++this.requestNumber_;\n        const msg = { r: curReqNum, a: action, b: body };\n        this.log_(stringify(msg));\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    }\n    get(query) {\n        this.initConnection_();\n        const deferred = new Deferred();\n        const request = {\n            p: query._path.toString(),\n            q: query._queryObject\n        };\n        const outstandingGet = {\n            action: 'g',\n            request,\n            onComplete: (message) => {\n                const payload = message['d'];\n                if (message['s'] === 'ok') {\n                    deferred.resolve(payload);\n                }\n                else {\n                    deferred.reject(payload);\n                }\n            }\n        };\n        this.outstandingGets_.push(outstandingGet);\n        this.outstandingGetCount_++;\n        const index = this.outstandingGets_.length - 1;\n        if (this.connected_) {\n            this.sendGet_(index);\n        }\n        return deferred.promise;\n    }\n    listen(query, currentHashFn, tag, onComplete) {\n        this.initConnection_();\n        const queryId = query._queryIdentifier;\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        if (!this.listens.has(pathString)) {\n            this.listens.set(pathString, new Map());\n        }\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n        const listenSpec = {\n            onComplete,\n            hashFn: currentHashFn,\n            query,\n            tag\n        };\n        this.listens.get(pathString).set(queryId, listenSpec);\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    }\n    sendGet_(index) {\n        const get = this.outstandingGets_[index];\n        this.sendRequest('g', get.request, (message) => {\n            delete this.outstandingGets_[index];\n            this.outstandingGetCount_--;\n            if (this.outstandingGetCount_ === 0) {\n                this.outstandingGets_ = [];\n            }\n            if (get.onComplete) {\n                get.onComplete(message);\n            }\n        });\n    }\n    sendListen_(listenSpec) {\n        const query = listenSpec.query;\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query._queryObject;\n            req['t'] = listenSpec.tag;\n        }\n        req[ /*hash*/'h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, (message) => {\n            const payload = message[ /*data*/'d'];\n            const status = message[ /*status*/'s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            const currentListenSpec = this.listens.get(pathString) &&\n                this.listens.get(pathString).get(queryId);\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                this.log_('listen response', message);\n                if (status !== 'ok') {\n                    this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    }\n    static warnOnListenWarnings_(payload, query) {\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const warnings = safeGet(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n                const indexPath = query._path.toString();\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\n                    `${indexPath} to your security rules for better performance.`);\n            }\n        }\n    }\n    refreshAuthToken(token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, () => { });\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n    reduceReconnectDelayIfAdminCredential_(credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        const isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || isAdmin(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    }\n    refreshAppCheckToken(token) {\n        this.appCheckToken_ = token;\n        this.log_('App check token refreshed');\n        if (this.appCheckToken_) {\n            this.tryAppCheck();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us.\n            //If we're not connected, simply delete the credential so we dont become\n            // authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unappeck', {}, () => { });\n            }\n        }\n    }\n    /**\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n     * a auth revoked (the connection is closed).\n     */\n    tryAuth() {\n        if (this.connected_ && this.authToken_) {\n            const token = this.authToken_;\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n            const requestData = { cred: token };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            }\n            else if (typeof this.authOverride_ === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (this.authToken_ === token) {\n                    if (status === 'ok') {\n                        this.invalidAuthTokenCount_ = 0;\n                    }\n                    else {\n                        // Triggers reconnect and force refresh for auth token\n                        this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Attempts to authenticate with the given token. If the authentication\n     * attempt fails, it's triggered like the token was revoked (the connection is\n     * closed).\n     */\n    tryAppCheck() {\n        if (this.connected_ && this.appCheckToken_) {\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (status === 'ok') {\n                    this.invalidAppCheckTokenCount_ = 0;\n                }\n                else {\n                    this.onAppCheckRevoked_(status, data);\n                }\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    unlisten(query, tag) {\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n        }\n    }\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    }\n    onDisconnectPut(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'o',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectMerge(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'om',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectCancel(pathString, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'oc',\n                data: null,\n                onComplete\n            });\n        }\n    }\n    sendOnDisconnect_(action, pathString, data, onComplete) {\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, (response) => {\n            if (onComplete) {\n                setTimeout(() => {\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\n                }, Math.floor(0));\n            }\n        });\n    }\n    put(pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    }\n    merge(pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    }\n    putInternal(action, pathString, data, onComplete, hash) {\n        this.initConnection_();\n        const request = {\n            /*path*/ p: pathString,\n            /*data*/ d: data\n        };\n        if (hash !== undefined) {\n            request[ /*hash*/'h'] = hash;\n        }\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action,\n            request,\n            onComplete\n        });\n        this.outstandingPutCount_++;\n        const index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        }\n        else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    }\n    sendPut_(index) {\n        const action = this.outstandingPuts_[index].action;\n        const request = this.outstandingPuts_[index].request;\n        const onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, (message) => {\n            this.log_(action + ' response', message);\n            delete this.outstandingPuts_[index];\n            this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (this.outstandingPutCount_ === 0) {\n                this.outstandingPuts_ = [];\n            }\n            if (onComplete) {\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\n            }\n        });\n    }\n    reportStats(stats) {\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            const request = { /*counters*/ c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest(/*stats*/ 's', request, result => {\n                const status = result[ /*status*/'s'];\n                if (status !== 'ok') {\n                    const errorReason = result[ /* data */'d'];\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    }\n    onDataMessage_(message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + stringify(message));\n            const reqNum = message['r'];\n            const onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message[ /*body*/'b']);\n            }\n        }\n        else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        }\n        else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    }\n    onDataPush_(action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge*/ false, body['t']);\n        }\n        else if (action === 'm') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge=*/ true, body['t']);\n        }\n        else if (action === 'c') {\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\n        }\n        else if (action === 'ac') {\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'apc') {\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'sd') {\n            this.onSecurityDebugPacket_(body);\n        }\n        else {\n            error('Unrecognized action received from server: ' +\n                stringify(action) +\n                '\\nAre you using the latest client?');\n        }\n    }\n    onReady_(timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    }\n    scheduleConnect_(timeout) {\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(() => {\n            this.establishConnectionTimer_ = null;\n            this.establishConnection_();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(timeout));\n    }\n    initConnection_() {\n        if (!this.realtime_ && this.firstConnection_) {\n            this.scheduleConnect_(0);\n        }\n    }\n    onVisible_(visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible &&\n            !this.visible_ &&\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    }\n    onOnline_(online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    }\n    onRealtimeDisconnect_() {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            }\n            else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                }\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    }\n    async establishConnection_() {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            const onDataMessage = this.onDataMessage_.bind(this);\n            const onReady = this.onReady_.bind(this);\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            const lastSessionId = this.lastSessionId;\n            let canceled = false;\n            let connection = null;\n            const closeFn = function () {\n                if (connection) {\n                    connection.close();\n                }\n                else {\n                    canceled = true;\n                    onDisconnect();\n                }\n            };\n            const sendRequestFn = function (msg) {\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\n                connection.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn,\n                sendRequest: sendRequestFn\n            };\n            const forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            try {\n                // First fetch auth and app check token, and establish connection after\n                // fetching the token was successful\n                const [authToken, appCheckToken] = await Promise.all([\n                    this.authTokenProvider_.getToken(forceRefresh),\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\n                ]);\n                if (!canceled) {\n                    log('getToken() completed. Creating connection.');\n                    this.authToken_ = authToken && authToken.accessToken;\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \n                    /* onKill= */ reason => {\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId);\n                }\n                else {\n                    log('getToken() completed but was canceled');\n                }\n            }\n            catch (error) {\n                this.log_('Failed to get token: ' + error);\n                if (!canceled) {\n                    if (this.repoInfo_.nodeAdmin) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        warn(error);\n                    }\n                    closeFn();\n                }\n            }\n        }\n    }\n    interrupt(reason) {\n        log('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        }\n        else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    }\n    resume(reason) {\n        log('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if (isEmpty(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    }\n    handleTimestamp_(timestamp) {\n        const delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    }\n    cancelSentTransactions_() {\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            const put = this.outstandingPuts_[i];\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\n                if (put.onComplete) {\n                    put.onComplete('disconnect');\n                }\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) {\n            this.outstandingPuts_ = [];\n        }\n    }\n    onListenRevoked_(pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        let queryId;\n        if (!query) {\n            queryId = 'default';\n        }\n        else {\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n        }\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete) {\n            listen.onComplete('permission_denied');\n        }\n    }\n    removeListen_(pathString, queryId) {\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\n        let listen;\n        if (this.listens.has(normalizedPathString)) {\n            const map = this.listens.get(normalizedPathString);\n            listen = map.get(queryId);\n            map.delete(queryId);\n            if (map.size === 0) {\n                this.listens.delete(normalizedPathString);\n            }\n        }\n        else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    }\n    onAuthRevoked_(statusCode, explanation) {\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onAppCheckRevoked_(statusCode, explanation) {\n        log('App check token revoked: ' + statusCode + '/' + explanation);\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = true;\n        // Note: We don't close the connection as the developer may not have\n        // enforcement enabled. The backend closes connections with enforcements.\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAppCheckTokenCount_++;\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                this.appCheckTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onSecurityDebugPacket_(body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        }\n        else {\n            if ('msg' in body) {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    }\n    restoreState_() {\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        this.tryAppCheck();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        for (const queries of this.listens.values()) {\n            for (const listenSpec of queries.values()) {\n                this.sendListen_(listenSpec);\n            }\n        }\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i]) {\n                this.sendPut_(i);\n            }\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            const request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\n            if (this.outstandingGets_[i]) {\n                this.sendGet_(i);\n            }\n        }\n    }\n    /**\n     * Sends client stats for first connection\n     */\n    sendConnectStats_() {\n        const stats = {};\n        let clientName = 'js';\n        if (isNodeSdk()) {\n            if (this.repoInfo_.nodeAdmin) {\n                clientName = 'admin_node';\n            }\n            else {\n                clientName = 'node';\n            }\n        }\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if (isMobileCordova()) {\n            stats['framework.cordova'] = 1;\n        }\n        else if (isReactNative()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    }\n    shouldReconnect_() {\n        const online = OnlineMonitor.getInstance().currentlyOnline();\n        return isEmpty(this.interruptReasons_) && online;\n    }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NamedNode {\n    constructor(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    static Wrap(name, node) {\n        return new NamedNode(name, node);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Index {\n    /**\n     * @returns A standalone comparison function for\n     * this index\n     */\n    getCompare() {\n        return this.compare.bind(this);\n    }\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     *\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    indexedValueChanged(oldNode, newNode) {\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    }\n    /**\n     * @returns a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n    static get __EMPTY_NODE() {\n        return __EMPTY_NODE;\n    }\n    static set __EMPTY_NODE(val) {\n        __EMPTY_NODE = val;\n    }\n    compare(a, b) {\n        return nameCompare(a.name, b.name);\n    }\n    isDefinedOn(node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return false; // The key for a node never changes.\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\n    }\n    makePost(indexValue, name) {\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new NamedNode(indexValue, __EMPTY_NODE);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.key';\n    }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An iterator over an LLRBNode.\n */\nclass SortedMapIterator {\n    /**\n     * @param node - Node to iterate.\n     * @param isReverse_ - Whether or not to iterate in reverse\n     */\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        this.nodeStack_ = [];\n        let cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_) {\n                cmp *= -1;\n            }\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    getNext() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        let node = this.nodeStack_.pop();\n        let result;\n        if (this.resultGenerator_) {\n            result = this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            result = { key: node.key, value: node.value };\n        }\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    }\n    hasNext() {\n        return this.nodeStack_.length > 0;\n    }\n    peek() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    }\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nclass LLRBNode {\n    /**\n     * @param key - Key associated with this node.\n     * @param value - Value associated with this node.\n     * @param color - Whether this node is red.\n     * @param left - Left child.\n     * @param right - Right child.\n     */\n    constructor(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param key - New key for the node, or null.\n     * @param value - New value for the node, or null.\n     * @param color - New color for the node, or null.\n     * @param left - New left child for the node, or null.\n     * @param right - New right child for the node, or null.\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return this.left.count() + 1 + this.right.count();\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return (this.left.inorderTraversal(action) ||\n            !!action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    }\n    /**\n     * @returns The minimum node in the tree.\n     */\n    min_() {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    minKey() {\n        return this.min_().key;\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    maxKey() {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    }\n    /**\n     * @param key - Key to insert.\n     * @param value - Value to insert.\n     * @param comparator - Comparator.\n     * @returns New tree, with the key/value added.\n     */\n    insert(key, value, comparator) {\n        let n = this;\n        const cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns New tree, with the minimum key removed.\n     */\n    removeMin_() {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        let n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\n            n = n.moveRedLeft_();\n        }\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    }\n    /**\n     * @param key - The key of the item to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with the specified item removed.\n     */\n    remove(key, comparator) {\n        let n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_()) {\n                n = n.rotateRight_();\n            }\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns Whether this is a RED node.\n     */\n    isRed_() {\n        return this.color;\n    }\n    /**\n     * @returns New tree after performing any needed rotations.\n     */\n    fixUp_() {\n        let n = this;\n        if (n.right.isRed_() && !n.left.isRed_()) {\n            n = n.rotateLeft_();\n        }\n        if (n.left.isRed_() && n.left.left.isRed_()) {\n            n = n.rotateRight_();\n        }\n        if (n.left.isRed_() && n.right.isRed_()) {\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedLeft.\n     */\n    moveRedLeft_() {\n        let n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedRight.\n     */\n    moveRedRight_() {\n        let n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after rotateLeft.\n     */\n    rotateLeft_() {\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\n     * @returns New tree, after rotateRight.\n     */\n    rotateRight_() {\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\n     * @returns Newt ree, after colorFlip.\n     */\n    colorFlip_() {\n        const left = this.left.copy(null, null, !this.left.color, null, null);\n        const right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    }\n    /**\n     * For testing.\n     *\n     * @returns True if all is well.\n     */\n    checkMaxDepth_() {\n        const blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n    check_() {\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        const blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nclass LLRBEmptyNode {\n    /**\n     * Returns a copy of the current node.\n     *\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return this;\n    }\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @param comparator - Comparator.\n     * @returns New tree, with item added.\n     */\n    insert(key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    }\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with item removed.\n     */\n    remove(key, comparator) {\n        return this;\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return 0;\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return true;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    inorderTraversal(action) {\n        return false;\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return false;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    check_() {\n        return 0;\n    }\n    /**\n     * @returns Whether this node is red.\n     */\n    isRed_() {\n        return false;\n    }\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nclass SortedMap {\n    /**\n     * @param comparator_ - Key comparator.\n     * @param root_ - Optional root node for the map.\n     */\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @returns New map, with item added.\n     */\n    insert(key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @returns New map, with item removed.\n     */\n    remove(key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param key - The key to look up.\n     * @returns The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    get(key) {\n        let cmp;\n        let node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param key - The key to find the predecessor of\n     * @returns The predecessor key.\n     */\n    getPredecessorKey(key) {\n        let cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty()) {\n                        node = node.right;\n                    }\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    }\n    /**\n     * @returns True if the map is empty.\n     */\n    isEmpty() {\n        return this.root_.isEmpty();\n    }\n    /**\n     * @returns The total number of nodes in the map.\n     */\n    count() {\n        return this.root_.count();\n    }\n    /**\n     * @returns The minimum key in the map.\n     */\n    minKey() {\n        return this.root_.minKey();\n    }\n    /**\n     * @returns The maximum key in the map.\n     */\n    maxKey() {\n        return this.root_.maxKey();\n    }\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return this.root_.inorderTraversal(action);\n    }\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns True if the traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return this.root_.reverseTraversal(action);\n    }\n    /**\n     * Returns an iterator over the SortedMap.\n     * @returns The iterator.\n     */\n    getIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    }\n    getIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    }\n    getReverseIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    }\n    getReverseIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    }\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n    return nameCompare(left, right);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n    MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n    if (typeof priority === 'number') {\n        return 'number:' + doubleToIEEE754String(priority);\n    }\n    else {\n        return 'string:' + priority;\n    }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\nconst validatePriorityNode = function (priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        const val = priorityNode.val();\n        assert(typeof val === 'string' ||\n            typeof val === 'number' ||\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\n    }\n    else {\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nclass LeafNode {\n    static set __childrenNodeConstructor(val) {\n        __childrenNodeConstructor = val;\n    }\n    static get __childrenNodeConstructor() {\n        return __childrenNodeConstructor;\n    }\n    /**\n     * @param value_ - The value to store in this leaf node. The object type is\n     * possible in the event of a deferred value\n     * @param priorityNode_ - The priority of this node.\n     */\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        validatePriorityNode(this.priorityNode_);\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return true;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        if (pathIsEmpty(path)) {\n            return this;\n        }\n        else if (pathGetFront(path) === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    hasChild() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode) {\n        return null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return false;\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return 0;\n    }\n    /** @inheritDoc */\n    forEachChild(index, action) {\n        return false;\n    }\n    val(exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        }\n        else {\n            return this.getValue();\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.priorityNode_.isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            }\n            const type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /**\n     * Returns the value of the leaf node.\n     * @returns The value of the node.\n     */\n    getValue() {\n        return this.value_;\n    }\n    compareTo(other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            assert(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    }\n    /**\n     * Comparison specifically for two leaf nodes\n     */\n    compareToLeafNode_(otherLeaf) {\n        const otherLeafType = typeof otherLeaf.value_;\n        const thisLeafType = typeof this.value_;\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    }\n    withIndex() {\n        return this;\n    }\n    isIndexed() {\n        return true;\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            const otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    }\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n    MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n    compare(a, b) {\n        const aPriority = a.node.getPriority();\n        const bPriority = b.node.getPriority();\n        const indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return !node.getPriority().isEmpty();\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n    }\n    makePost(indexValue, name) {\n        const priorityNode = nodeFromJSON$1(indexValue);\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.priority';\n    }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n    constructor(length) {\n        const logBase2 = (num) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parseInt((Math.log(num) / LOG_2), 10);\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        const mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    nextBitIsOne() {\n        //noinspection JSBitwiseOperatorUsage\n        const result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    }\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    const buildBalancedTree = function (low, high) {\n        const length = high - low;\n        let namedNode;\n        let key;\n        if (length === 0) {\n            return null;\n        }\n        else if (length === 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const middle = parseInt((length / 2), 10) + low;\n            const left = buildBalancedTree(low, middle);\n            const right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n        }\n    };\n    const buildFrom12Array = function (base12) {\n        let node = null;\n        let root = null;\n        let index = childList.length;\n        const buildPennant = function (chunkSize, color) {\n            const low = index - chunkSize;\n            const high = index;\n            index -= chunkSize;\n            const childTree = buildBalancedTree(low + 1, high);\n            const namedNode = childList[low];\n            const key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        const attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (let i = 0; i < base12.count; ++i) {\n            const isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, LLRBNode.BLACK);\n                buildPennant(chunkSize, LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    const base12 = new Base12Num(childList.length);\n    const root = buildFrom12Array(base12);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n    /**\n     * The default IndexMap for nodes without a priority\n     */\n    static get Default() {\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n        _defaultIndexMap =\n            _defaultIndexMap ||\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\n        return _defaultIndexMap;\n    }\n    constructor(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    get(indexKey) {\n        const sortedMap = safeGet(this.indexes_, indexKey);\n        if (!sortedMap) {\n            throw new Error('No index defined for ' + indexKey);\n        }\n        if (sortedMap instanceof SortedMap) {\n            return sortedMap;\n        }\n        else {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        }\n    }\n    hasIndex(indexDefinition) {\n        return contains(this.indexSet_, indexDefinition.toString());\n    }\n    addIndex(indexDefinition, existingChildren) {\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        const childList = [];\n        let sawIndexedValue = false;\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\n        let next = iter.getNext();\n        while (next) {\n            sawIndexedValue =\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        let newIndex;\n        if (sawIndexedValue) {\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\n        }\n        else {\n            newIndex = fallbackObject;\n        }\n        const indexName = indexDefinition.toString();\n        const newIndexSet = Object.assign({}, this.indexSet_);\n        newIndexSet[indexName] = indexDefinition;\n        const newIndexes = Object.assign({}, this.indexes_);\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    }\n    /**\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\n     */\n    addToIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n            const index = safeGet(this.indexSet_, indexName);\n            assert(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    const childList = [];\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\n                    let next = iter.getNext();\n                    while (next) {\n                        if (next.name !== namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return buildChildSet(childList, index.getCompare());\n                }\n                else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                let newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n    /**\n     * Create a new IndexMap instance with the given value removed\n     */\n    removeFromIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nclass ChildrenNode {\n    static get EMPTY_NODE() {\n        return (EMPTY_NODE ||\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\n    }\n    /**\n     * @param children_ - List of children of this node..\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\n     */\n    constructor(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            const child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return this;\n        }\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n    hasChild(childName) {\n        return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        assert(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            const namedNode = new NamedNode(childName, newChildNode);\n            let newChildren, newIndexMap;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            const newPriority = newChildren.isEmpty()\n                ? EMPTY_NODE\n                : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return this.children_.count();\n    }\n    /** @inheritDoc */\n    val(exportFormat) {\n        if (this.isEmpty()) {\n            return null;\n        }\n        const obj = {};\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            const array = [];\n            // eslint-disable-next-line guard-for-in\n            for (const key in obj) {\n                array[key] = obj[key];\n            }\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.getPriority().isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.getPriority().val()) +\n                        ':';\n            }\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                const childHash = childNode.hash();\n                if (childHash !== '') {\n                    toHash += ':' + key + ':' + childHash;\n                }\n            });\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode, index) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    }\n    getFirstChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    }\n    getFirstChild(indexDefinition) {\n        const minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     */\n    getLastChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    }\n    getLastChild(indexDefinition) {\n        const maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    }\n    forEachChild(index, action) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(wrappedNode => {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    }\n    getIterator(indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n    getIteratorFrom(startPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, key => key);\n        }\n        else {\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    getReverseIterator(indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n    getReverseIteratorFrom(endPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, key => {\n                return key;\n            });\n        }\n        else {\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    compareTo(other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    }\n    withIndex(indexDefinition) {\n        if (indexDefinition === KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    }\n    isIndexed(index) {\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            const otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                const thisIter = this.getIterator(PRIORITY_INDEX);\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n                let thisCurrent = thisIter.getNext();\n                let otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     */\n    resolveIndex_(indexDefinition) {\n        if (indexDefinition === KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n    constructor() {\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n    }\n    compareTo(other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    equals(other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    }\n    getPriority() {\n        return this;\n    }\n    getImmediateChild(childName) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    isEmpty() {\n        return false;\n    }\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n    MIN: {\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new NamedNode(MAX_NAME, MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nfunction nodeFromJSON(json, priority = null) {\n    if (json === null) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    if (typeof json === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    assert(priority === null ||\n        typeof priority === 'string' ||\n        typeof priority === 'number' ||\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if (typeof json !== 'object' || '.sv' in json) {\n        const jsonLeaf = json;\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        const children = [];\n        let childrenHavePriority = false;\n        const hinzeJsonObj = json;\n        each(hinzeJsonObj, (key, child) => {\n            if (key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                const childNode = nodeFromJSON(child);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority =\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\n                    children.push(new NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children.length === 0) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n        if (childrenHavePriority) {\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\n        }\n        else {\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n        }\n    }\n    else {\n        let node = ChildrenNode.EMPTY_NODE;\n        each(json, (key, childData) => {\n            if (contains(json, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    const childNode = nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\n                        node = node.updateImmediateChild(key, childNode);\n                    }\n                }\n            }\n        });\n        return node.updatePriority(nodeFromJSON(priority));\n    }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PathIndex extends Index {\n    constructor(indexPath_) {\n        super();\n        this.indexPath_ = indexPath_;\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    }\n    extractChild(snap) {\n        return snap.getChild(this.indexPath_);\n    }\n    isDefinedOn(node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    }\n    compare(a, b) {\n        const aChild = this.extractChild(a.node);\n        const bChild = this.extractChild(b.node);\n        const indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    }\n    maxPost() {\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n        return new NamedNode(MAX_NAME, node);\n    }\n    toString() {\n        return pathSlice(this.indexPath_, 0).join('/');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ValueIndex extends Index {\n    compare(a, b) {\n        const indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return true;\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MAX;\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.value';\n    }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction changeValue(snapshotNode) {\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n    return {\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n        snapshotNode,\n        childName,\n        oldSnap\n    };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nclass IndexedFilter {\n    constructor(index_) {\n        this.index_ = index_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        const oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n                }\n                else {\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (oldSnap.hasChild(key)) {\n                        const oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    }\n    updatePriority(oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    }\n    filtersNodes() {\n        return false;\n    }\n    getIndexedFilter() {\n        return this;\n    }\n    getIndex() {\n        return this.index_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nclass RangedFilter {\n    constructor(params) {\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    getStartPost() {\n        return this.startPost_;\n    }\n    getEndPost() {\n        return this.endPost_;\n    }\n    matches(node) {\n        const isWithinStart = this.startIsInclusive_\n            ? this.index_.compare(this.getStartPost(), node) <= 0\n            : this.index_.compare(this.getStartPost(), node) < 0;\n        const isWithinEnd = this.endIsInclusive_\n            ? this.index_.compare(node, this.getEndPost()) <= 0\n            : this.index_.compare(node, this.getEndPost()) < 0;\n        return isWithinStart && isWithinEnd;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode.EMPTY_NODE;\n        }\n        let filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        const self = this;\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            if (!self.matches(new NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.indexedFilter_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    static getStartPost_(params) {\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        }\n        else {\n            return params.getIndex().minPost();\n        }\n    }\n    static getEndPost_(params) {\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        }\n        else {\n            return params.getIndex().maxPost();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nclass LimitedFilter {\n    constructor(params) {\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n        this.withinStartPost = (node) => {\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.withinEndPost = (node) => {\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.rangedFilter_ = new RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        }\n        else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_\n                .getIndexedFilter()\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        }\n        else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        let filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        }\n        else {\n            if (this.limit_ * 2 < newSnap.numChildren() &&\n                newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                let iterator;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                }\n                else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    const next = iterator.getNext();\n                    if (!this.withinDirectionalStart(next)) {\n                        // if we have not reached the start, skip to the next element\n                        continue;\n                    }\n                    else if (!this.withinDirectionalEnd(next)) {\n                        // if we have reached the end, stop adding elements\n                        break;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    }\n                }\n            }\n            else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n                let iterator;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                }\n                else {\n                    iterator = filtered.getIterator(this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext()) {\n                    const next = iterator.getNext();\n                    const inRange = count < this.limit_ &&\n                        this.withinDirectionalStart(next) &&\n                        this.withinDirectionalEnd(next);\n                    if (inRange) {\n                        count++;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_\n            .getIndexedFilter()\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.rangedFilter_.getIndexedFilter();\n    }\n    getIndex() {\n        return this.index_;\n    }\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        let cmp;\n        if (this.reverse_) {\n            const indexCmp = this.index_.getCompare();\n            cmp = (a, b) => indexCmp(b, a);\n        }\n        else {\n            cmp = this.index_.getCompare();\n        }\n        const oldEventCache = snap;\n        assert(oldEventCache.numChildren() === this.limit_, '');\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\n        const windowBoundary = this.reverse_\n            ? oldEventCache.getFirstChild(this.index_)\n            : oldEventCache.getLastChild(this.index_);\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null &&\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            }\n            else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n                }\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                }\n                else {\n                    return newEventCache;\n                }\n            }\n        }\n        else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        }\n        else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n                }\n                return oldEventCache\n                    .updateImmediateChild(childKey, childSnap)\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n            }\n            else {\n                return snap;\n            }\n        }\n        else {\n            return snap;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nclass QueryParams {\n    constructor() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PRIORITY_INDEX;\n    }\n    hasStart() {\n        return this.startSet_;\n    }\n    /**\n     * @returns True if it would return from left.\n     */\n    isViewFromLeft() {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        }\n        else {\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n        }\n    }\n    /**\n     * Only valid to call if hasStart() returns true\n     */\n    getIndexStartValue() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    }\n    /**\n     * Only valid to call if hasStart() returns true.\n     * Returns the starting key name for the range defined by these query parameters\n     */\n    getIndexStartName() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        }\n        else {\n            return MIN_NAME;\n        }\n    }\n    hasEnd() {\n        return this.endSet_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     */\n    getIndexEndValue() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * Returns the end key name for the range defined by these query parameters\n     */\n    getIndexEndName() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        }\n        else {\n            return MAX_NAME;\n        }\n    }\n    hasLimit() {\n        return this.limitSet_;\n    }\n    /**\n     * @returns True if a limit has been set and it has been explicitly anchored\n     */\n    hasAnchoredLimit() {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    }\n    /**\n     * Only valid to call if hasLimit() returns true\n     */\n    getLimit() {\n        assert(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    loadsAllData() {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    }\n    isDefault() {\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n    }\n    copy() {\n        const copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.startAfterSet_ = this.startAfterSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.endBeforeSet_ = this.endBeforeSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n    if (queryParams.loadsAllData()) {\n        return new IndexedFilter(queryParams.getIndex());\n    }\n    else if (queryParams.hasLimit()) {\n        return new LimitedFilter(queryParams);\n    }\n    else {\n        return new RangedFilter(queryParams);\n    }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n    return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n        newParams.startNameSet_ = true;\n        newParams.indexStartName_ = key;\n    }\n    else {\n        newParams.startNameSet_ = false;\n        newParams.indexStartName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsStartAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n    }\n    params.startAfterSet_ = true;\n    return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n        newParams.endNameSet_ = true;\n        newParams.indexEndName_ = key;\n    }\n    else {\n        newParams.endNameSet_ = false;\n        newParams.indexEndName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsEndAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n    }\n    params.endBeforeSet_ = true;\n    return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n    const newParams = queryParams.copy();\n    newParams.index_ = index;\n    return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n    const qs = {};\n    if (queryParams.isDefault()) {\n        return qs;\n    }\n    let orderBy;\n    if (queryParams.index_ === PRIORITY_INDEX) {\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n    }\n    else if (queryParams.index_ === VALUE_INDEX) {\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n    }\n    else if (queryParams.index_ === KEY_INDEX) {\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n    }\n    else {\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n        orderBy = queryParams.index_.toString();\n    }\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\n    if (queryParams.startSet_) {\n        const startParam = queryParams.startAfterSet_\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n        qs[startParam] = stringify(queryParams.indexStartValue_);\n        if (queryParams.startNameSet_) {\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n        }\n    }\n    if (queryParams.endSet_) {\n        const endParam = queryParams.endBeforeSet_\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n        qs[endParam] = stringify(queryParams.indexEndValue_);\n        if (queryParams.endNameSet_) {\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n        }\n    }\n    if (queryParams.limitSet_) {\n        if (queryParams.isViewFromLeft()) {\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n        }\n        else {\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n        }\n    }\n    return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n    const obj = {};\n    if (queryParams.startSet_) {\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\n            queryParams.indexStartValue_;\n        if (queryParams.startNameSet_) {\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\n                queryParams.indexStartName_;\n        }\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\n            !queryParams.startAfterSet_;\n    }\n    if (queryParams.endSet_) {\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n        if (queryParams.endNameSet_) {\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n        }\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\n            !queryParams.endBeforeSet_;\n    }\n    if (queryParams.limitSet_) {\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n        let viewFrom = queryParams.viewFrom_;\n        if (viewFrom === '') {\n            if (queryParams.isViewFromLeft()) {\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n            }\n            else {\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n            }\n        }\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (queryParams.index_ !== PRIORITY_INDEX) {\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n    }\n    return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nclass ReadonlyRestClient extends ServerActions {\n    reportStats(stats) {\n        throw new Error('Method not implemented.');\n    }\n    static getListenId_(query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        }\n        else {\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n            return query._path.toString();\n        }\n    }\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        /** @private {function(...[*])} */\n        this.log_ = logWrapper('p:rest:');\n        /**\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n         * that's been removed. :-/\n         */\n        this.listens_ = {};\n    }\n    /** @inheritDoc */\n    listen(query, currentHashFn, tag, onComplete) {\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n        // Mark this listener so we can tell if it's removed.\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        const thisListen = {};\n        this.listens_[listenId] = thisListen;\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n            }\n            if (safeGet(this.listens_, listenId) === thisListen) {\n                let status;\n                if (!error) {\n                    status = 'ok';\n                }\n                else if (error === 401) {\n                    status = 'permission_denied';\n                }\n                else {\n                    status = 'rest_error:' + error;\n                }\n                onComplete(status, null);\n            }\n        });\n    }\n    /** @inheritDoc */\n    unlisten(query, tag) {\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    }\n    get(query) {\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        const pathString = query._path.toString();\n        const deferred = new Deferred();\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, \n                /*isMerge=*/ false, \n                /*tag=*/ null);\n                deferred.resolve(data);\n            }\n            else {\n                deferred.reject(new Error(data));\n            }\n        });\n        return deferred.promise;\n    }\n    /** @inheritDoc */\n    refreshAuthToken(token) {\n        // no-op since we just always call getToken.\n    }\n    /**\n     * Performs a REST request to the given path, with the provided query string parameters,\n     * and any auth credentials we have.\n     */\n    restRequest_(pathString, queryStringParameters = {}, callback) {\n        queryStringParameters['format'] = 'export';\n        return Promise.all([\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n        ]).then(([authToken, appCheckToken]) => {\n            if (authToken && authToken.accessToken) {\n                queryStringParameters['auth'] = authToken.accessToken;\n            }\n            if (appCheckToken && appCheckToken.token) {\n                queryStringParameters['ac'] = appCheckToken.token;\n            }\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\n                this.repoInfo_.host +\n                pathString +\n                '?' +\n                'ns=' +\n                this.repoInfo_.namespace +\n                querystring(queryStringParameters);\n            this.log_('Sending REST request for ' + url);\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (callback && xhr.readyState === 4) {\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    let res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = jsonEval(xhr.responseText);\n                        }\n                        catch (e) {\n                            warn('Failed to parse JSON response for ' +\n                                url +\n                                ': ' +\n                                xhr.responseText);\n                        }\n                        callback(null, res);\n                    }\n                    else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            warn('Got unsuccessful REST response for ' +\n                                url +\n                                ' Status: ' +\n                                xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/ true);\n            xhr.send();\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nclass SnapshotHolder {\n    constructor() {\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\n    }\n    getNode(path) {\n        return this.rootNode_.getChild(path);\n    }\n    updateSnapshot(path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSparseSnapshotTree() {\n    return {\n        value: null,\n        children: new Map()\n    };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = data;\n        sparseSnapshotTree.children.clear();\n    }\n    else if (sparseSnapshotTree.value !== null) {\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n    }\n    else {\n        const childKey = pathGetFront(path);\n        if (!sparseSnapshotTree.children.has(childKey)) {\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n        }\n        const child = sparseSnapshotTree.children.get(childKey);\n        path = pathPopFront(path);\n        sparseSnapshotTreeRemember(child, path, data);\n    }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = null;\n        sparseSnapshotTree.children.clear();\n        return true;\n    }\n    else {\n        if (sparseSnapshotTree.value !== null) {\n            if (sparseSnapshotTree.value.isLeafNode()) {\n                // We're trying to forget a node that doesn't exist\n                return false;\n            }\n            else {\n                const value = sparseSnapshotTree.value;\n                sparseSnapshotTree.value = null;\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n                });\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n            }\n        }\n        else if (sparseSnapshotTree.children.size > 0) {\n            const childKey = pathGetFront(path);\n            path = pathPopFront(path);\n            if (sparseSnapshotTree.children.has(childKey)) {\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n                if (safeToRemove) {\n                    sparseSnapshotTree.children.delete(childKey);\n                }\n            }\n            return sparseSnapshotTree.children.size === 0;\n        }\n        else {\n            return true;\n        }\n    }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n    if (sparseSnapshotTree.value !== null) {\n        func(prefixPath, sparseSnapshotTree.value);\n    }\n    else {\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n            const path = new Path(prefixPath.toString() + '/' + key);\n            sparseSnapshotTreeForEachTree(tree, path, func);\n        });\n    }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n    sparseSnapshotTree.children.forEach((tree, key) => {\n        func(key, tree);\n    });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nclass StatsListener {\n    constructor(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    get() {\n        const newStats = this.collection_.get();\n        const delta = Object.assign({}, newStats);\n        if (this.last_) {\n            each(this.last_, (stat, value) => {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n    constructor(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener(collection);\n        const timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    reportStats_() {\n        const stats = this.statsListener_.get();\n        const reportedStats = {};\n        let haveStatsToReport = false;\n        each(stats, (stat, value) => {\n            if (value > 0 && contains(this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n    return {\n        fromUser: true,\n        fromServer: false,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServer() {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId,\n        tagged: true\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AckUserWrite {\n    /**\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n     */\n    constructor(\n    /** @inheritDoc */ path, \n    /** @inheritDoc */ affectedTree, \n    /** @inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = newOperationSourceUser();\n    }\n    operationForChild(childName) {\n        if (!pathIsEmpty(this.path)) {\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            const childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ListenComplete {\n    constructor(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = OperationType.LISTEN_COMPLETE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new ListenComplete(this.source, newEmptyPath());\n        }\n        else {\n            return new ListenComplete(this.source, pathPopFront(this.path));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Overwrite {\n    constructor(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = OperationType.OVERWRITE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n        }\n        else {\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Merge {\n    constructor(\n    /** @inheritDoc */ source, \n    /** @inheritDoc */ path, \n    /** @inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            const childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, newEmptyPath(), childTree);\n            }\n        }\n        else {\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, pathPopFront(this.path), this.children);\n        }\n    }\n    toString() {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nclass CacheNode {\n    constructor(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     */\n    isFullyInitialized() {\n        return this.fullyInitialized_;\n    }\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     */\n    isFiltered() {\n        return this.filtered_;\n    }\n    isCompleteForPath(path) {\n        if (pathIsEmpty(path)) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        const childKey = pathGetFront(path);\n        return this.isCompleteForChild(childKey);\n    }\n    isCompleteForChild(key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    }\n    getNode() {\n        return this.node_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nclass EventGenerator {\n    constructor(query_) {\n        this.query_ = query_;\n        this.index_ = this.query_._queryParams.getIndex();\n    }\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n    const events = [];\n    const moves = [];\n    changes.forEach(change => {\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\n        }\n    });\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n    return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n    filteredChanges.forEach(change => {\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n        registrations.forEach(registration => {\n            if (registration.respondsTo(change.type)) {\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n            }\n        });\n    });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n        return change;\n    }\n    else {\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n        return change;\n    }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n    if (a.childName == null || b.childName == null) {\n        throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewCache(eventCache, serverCache) {\n    return { eventCache, serverCache };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n    return viewCache.eventCache.isFullyInitialized()\n        ? viewCache.eventCache.getNode()\n        : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n    return viewCache.serverCache.isFullyInitialized()\n        ? viewCache.serverCache.getNode()\n        : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = () => {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap(stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nclass ImmutableTree {\n    static fromObject(obj) {\n        let tree = new ImmutableTree(null);\n        each(obj, (childPath, childSnap) => {\n            tree = tree.set(new Path(childPath), childSnap);\n        });\n        return tree;\n    }\n    constructor(value, children = EmptyChildren()) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * True if the value is empty and there are no children\n     */\n    isEmpty() {\n        return this.value === null && this.children.isEmpty();\n    }\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param relativePath - The remainder of the path\n     * @param predicate - The predicate to satisfy to return a node\n     */\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: newEmptyPath(), value: this.value };\n        }\n        else {\n            if (pathIsEmpty(relativePath)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(relativePath);\n                const child = this.children.get(front);\n                if (child !== null) {\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n                    if (childExistingPathAndValue != null) {\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     */\n    findRootMostValueAndPath(relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n    }\n    /**\n     * @returns The subtree at the given path\n     */\n    subtree(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(pathPopFront(relativePath));\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param relativePath - Path to set value at.\n     * @param toSet - Value to set.\n     * @returns Resulting tree.\n     */\n    set(relativePath, toSet) {\n        if (pathIsEmpty(relativePath)) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.set(pathPopFront(relativePath), toSet);\n            const newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param relativePath - Path to value to remove.\n     * @returns Resulting tree.\n     */\n    remove(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            if (this.children.isEmpty()) {\n                return new ImmutableTree(null);\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                const newChild = child.remove(pathPopFront(relativePath));\n                let newChildren;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return new ImmutableTree(null);\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    }\n    /**\n     * Gets a value from the tree.\n     *\n     * @param relativePath - Path to get value for.\n     * @returns Value at path, or null.\n     */\n    get(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this.value;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                return child.get(pathPopFront(relativePath));\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param relativePath - Path to replace subtree for.\n     * @param newTree - New tree.\n     * @returns Resulting tree.\n     */\n    setTree(relativePath, newTree) {\n        if (pathIsEmpty(relativePath)) {\n            return newTree;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\n            let newChildren;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     */\n    fold(fn) {\n        return this.fold_(newEmptyPath(), fn);\n    }\n    /**\n     * Recursive helper for public-facing fold() method\n     */\n    fold_(pathSoFar, fn) {\n        const accum = {};\n        this.children.inorderTraversal((childKey, childTree) => {\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    }\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     */\n    findOnPath(path, f) {\n        return this.findOnPath_(path, newEmptyPath(), f);\n    }\n    findOnPath_(pathToFollow, pathSoFar, f) {\n        const result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathIsEmpty(pathToFollow)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(pathToFollow);\n                const nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    foreachOnPath(path, f) {\n        return this.foreachOnPath_(path, newEmptyPath(), f);\n    }\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\n        if (pathIsEmpty(pathToFollow)) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            const front = pathGetFront(pathToFollow);\n            const nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param f - A function to be called with the path from the root of the tree to\n     * a node, and the value at that node. Called in depth-first order.\n     */\n    foreach(f) {\n        this.foreach_(newEmptyPath(), f);\n    }\n    foreach_(currentRelativePath, f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    }\n    foreachChild(f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nclass CompoundWrite {\n    constructor(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    static empty() {\n        return new CompoundWrite(new ImmutableTree(null));\n    }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n    if (pathIsEmpty(path)) {\n        return new CompoundWrite(new ImmutableTree(node));\n    }\n    else {\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            const rootMostPath = rootmost.path;\n            let value = rootmost.value;\n            const relativePath = newRelativePath(rootMostPath, path);\n            value = value.updateChild(relativePath, node);\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n        }\n        else {\n            const subtree = new ImmutableTree(node);\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n            return new CompoundWrite(newWriteTree);\n        }\n    }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n    let newWrite = compoundWrite;\n    each(updates, (childKey, node) => {\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n    });\n    return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return CompoundWrite.empty();\n    }\n    else {\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n        return new CompoundWrite(newWriteTree);\n    }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n        return compoundWrite.writeTree_\n            .get(rootmost.path)\n            .getChild(newRelativePath(rootmost.path, path));\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n    const children = [];\n    const node = compoundWrite.writeTree_.value;\n    if (node != null) {\n        // If it's a leaf node, it has no children; so nothing to do.\n        if (!node.isLeafNode()) {\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n                children.push(new NamedNode(childName, childNode));\n            });\n        }\n    }\n    else {\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value != null) {\n                children.push(new NamedNode(childName, childTree.value));\n            }\n        });\n    }\n    return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return compoundWrite;\n    }\n    else {\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n        if (shadowingNode != null) {\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\n        }\n        else {\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n        }\n    }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n    return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nfunction compoundWriteApply(compoundWrite, node) {\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n    if (writeTree.value != null) {\n        // Since there a write is always a leaf, we're done here\n        return node.updateChild(relativePath, writeTree.value);\n    }\n    else {\n        let priorityWrite = null;\n        writeTree.children.inorderTraversal((childKey, childTree) => {\n            if (childKey === '.priority') {\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                // to apply priorities to empty nodes that are later filled\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                priorityWrite = childTree.value;\n            }\n            else {\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n            }\n        });\n        // If there was a priority write, we only apply it if the node is not empty\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n        }\n        return node;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nfunction writeTreeChildWrites(writeTree, path) {\n    return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n        visible = true;\n    }\n    writeTree.allWrites.push({\n        path,\n        snap,\n        writeId,\n        visible\n    });\n    if (visible) {\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n    }\n    writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n    writeTree.allWrites.push({\n        path,\n        children: changedChildren,\n        writeId,\n        visible: true\n    });\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n    writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\n        const record = writeTree.allWrites[i];\n        if (record.writeId === writeId) {\n            return record;\n        }\n    }\n    return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    const idx = writeTree.allWrites.findIndex(s => {\n        return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = writeTree.allWrites[idx];\n    writeTree.allWrites.splice(idx, 1);\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n    let i = writeTree.allWrites.length - 1;\n    while (removedWriteWasVisible && i >= 0) {\n        const currentWrite = writeTree.allWrites[i];\n        if (currentWrite.visible) {\n            if (i >= idx &&\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n                // The removed write was completely shadowed by a subsequent write.\n                removedWriteWasVisible = false;\n            }\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\n                removedWriteOverlapsWithOtherWrites = true;\n            }\n        }\n        i--;\n    }\n    if (!removedWriteWasVisible) {\n        return false;\n    }\n    else if (removedWriteOverlapsWithOtherWrites) {\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\n        writeTreeResetTree_(writeTree);\n        return true;\n    }\n    else {\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n        if (writeToRemove.snap) {\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n        }\n        else {\n            const children = writeToRemove.children;\n            each(children, (childName) => {\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n            });\n        }\n        return true;\n    }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n    if (writeRecord.snap) {\n        return pathContains(writeRecord.path, path);\n    }\n    else {\n        for (const childName in writeRecord.children) {\n            if (writeRecord.children.hasOwnProperty(childName) &&\n                pathContains(pathChild(writeRecord.path, childName), path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree) {\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n    if (writeTree.allWrites.length > 0) {\n        writeTree.lastWriteId =\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n    }\n    else {\n        writeTree.lastWriteId = -1;\n    }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write) {\n    return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n    let compoundWrite = CompoundWrite.empty();\n    for (let i = 0; i < writes.length; ++i) {\n        const write = writes[i];\n        // Theory, a later set will either:\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n        if (filter(write)) {\n            const writePath = write.path;\n            let relativePath;\n            if (write.snap) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n                }\n                else ;\n            }\n            else if (write.children) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    if (pathIsEmpty(relativePath)) {\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n                    }\n                    else {\n                        const child = safeGet(write.children, pathGetFront(relativePath));\n                        if (child) {\n                            // There exists a child in this node that matches the root path\n                            const deepNode = child.getChild(pathPopFront(relativePath));\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n                        }\n                    }\n                }\n                else ;\n            }\n            else {\n                throw assertionError('WriteRecord should have .snap or .children');\n            }\n        }\n    }\n    return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n            if (compoundWriteIsEmpty(subMerge)) {\n                return completeServerCache;\n            }\n            else if (completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                return null;\n            }\n            else {\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(subMerge, layeredCache);\n            }\n        }\n    }\n    else {\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n            return completeServerCache;\n        }\n        else {\n            // If the server cache is null, and we don't have a complete cache, we need to return null\n            if (!includeHiddenWrites &&\n                completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n                return null;\n            }\n            else {\n                const filter = function (write) {\n                    return ((write.visible || includeHiddenWrites) &&\n                        (!writeIdsToExclude ||\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\n                        (pathContains(write.path, treePath) ||\n                            pathContains(treePath, write.path)));\n                };\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(mergeAtPath, layeredCache);\n            }\n        }\n    }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n    let completeChildren = ChildrenNode.EMPTY_NODE;\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (topLevelSet) {\n        if (!topLevelSet.isLeafNode()) {\n            // we're shadowing everything. Return the children.\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n            });\n        }\n        return completeChildren;\n    }\n    else if (completeServerChildren) {\n        // Layer any children we have on top of this\n        // We know we don't have a top-level set, so just enumerate existing children\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\n        });\n        // Add any complete children we have from the set\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n    else {\n        // We don't have anything to layer on top of. Layer on any children we have\n        // Note that we can return an empty snap if we have a defined delete\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    const path = pathChild(treePath, childPath);\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n        // At this point we can probably guarantee that we're in case 2, meaning no events\n        // May need to check visibility while doing the findRootMostValueAndPath call\n        return null;\n    }\n    else {\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n        if (compoundWriteIsEmpty(childMerge)) {\n            // We're not shadowing at all. Case 1\n            return existingServerSnap.getChild(childPath);\n        }\n        else {\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n            // However this is tricky to find out, since user updates don't necessary change the server\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n            // only check if the updates change the serverNode.\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n        }\n    }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n    const path = pathChild(treePath, childKey);\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n    if (shadowingNode != null) {\n        return shadowingNode;\n    }\n    else {\n        if (existingServerSnap.isCompleteForChild(childKey)) {\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n    let toIterate;\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n    if (shadowingNode != null) {\n        toIterate = shadowingNode;\n    }\n    else if (completeServerData != null) {\n        toIterate = compoundWriteApply(merge, completeServerData);\n    }\n    else {\n        // no children to iterate on\n        return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n        const nodes = [];\n        const cmp = index.getCompare();\n        const iter = reverse\n            ? toIterate.getReverseIteratorFrom(startPost, index)\n            : toIterate.getIteratorFrom(startPost, index);\n        let next = iter.getNext();\n        while (next && nodes.length < count) {\n            if (cmp(next, startPost) !== 0) {\n                nodes.push(next);\n            }\n            next = iter.getNext();\n        }\n        return nodes;\n    }\n    else {\n        return [];\n    }\n}\nfunction newWriteTree() {\n    return {\n        visibleWrites: CompoundWrite.empty(),\n        allWrites: [],\n        lastWriteId: -1\n    };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n    return {\n        treePath: path,\n        writeTree\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ChildChangeAccumulator {\n    constructor() {\n        this.changeMap = new Map();\n    }\n    trackChildChange(change) {\n        const type = change.type;\n        const childKey = change.childName;\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        const oldChange = this.changeMap.get(childKey);\n        if (oldChange) {\n            const oldType = oldChange.type;\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.delete(childKey);\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n            }\n            else {\n                throw assertionError('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap.set(childKey, change);\n        }\n    }\n    getChanges() {\n        return Array.from(this.changeMap.values());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n    getCompleteChild(childKey) {\n        return null;\n    }\n    getChildAfterChild(index, child, reverse) {\n        return null;\n    }\n}\n/**\n * Singleton instance.\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nclass WriteTreeCompleteChildSource {\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    getCompleteChild(childKey) {\n        const node = this.viewCache_.eventCache;\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            const serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.serverCache;\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n        }\n    }\n    getChildAfterChild(index, child, reverse) {\n        const completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewProcessor(filter) {\n    return { filter };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n        const overwrite = operation;\n        if (overwrite.source.fromUser) {\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(overwrite.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n            // again\n            filterServerNode =\n                overwrite.source.tagged ||\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.MERGE) {\n        const merge = operation;\n        if (merge.source.fromUser) {\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(merge.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered\n            filterServerNode =\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\n        const ackUserWrite = operation;\n        if (!ackUserWrite.revert) {\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n        }\n        else {\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n    }\n    else {\n        throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n    return { viewCache: newViewCache, changes };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n    const eventSnap = newViewCache.eventCache;\n    if (eventSnap.isFullyInitialized()) {\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n        if (accumulator.length > 0 ||\n            !oldViewCache.eventCache.isFullyInitialized() ||\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n        }\n    }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n    const oldEventSnap = viewCache.eventCache;\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n        // we have a shadowing write, ignore changes\n        return viewCache;\n    }\n    else {\n        let newEventCache, serverNode;\n        if (pathIsEmpty(changePath)) {\n            // TODO: figure out how this plays with \"sliding ack windows\"\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n            if (viewCache.serverCache.isFiltered()) {\n                // We need to special case this, because we need to only apply writes to complete children, or\n                // we might end up raising events for incomplete children. If the server data is filtered deep\n                // writes cannot be guaranteed to be complete\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n                const completeChildren = serverCache instanceof ChildrenNode\n                    ? serverCache\n                    : ChildrenNode.EMPTY_NODE;\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n            }\n            else {\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n            }\n        }\n        else {\n            const childKey = pathGetFront(changePath);\n            if (childKey === '.priority') {\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n                const oldEventNode = oldEventSnap.getNode();\n                serverNode = viewCache.serverCache.getNode();\n                // we might have overwrites for this priority\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n                if (updatedPriority != null) {\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n                }\n                else {\n                    // priority didn't change, keep old node\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n            else {\n                const childChangePath = pathPopFront(changePath);\n                // update child\n                let newEventChild;\n                if (oldEventSnap.isCompleteForChild(childKey)) {\n                    serverNode = viewCache.serverCache.getNode();\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n                    if (eventChildUpdate != null) {\n                        newEventChild = oldEventSnap\n                            .getNode()\n                            .getImmediateChild(childKey)\n                            .updateChild(childChangePath, eventChildUpdate);\n                    }\n                    else {\n                        // Nothing changed, just keep the old child\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                    }\n                }\n                else {\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n                }\n                if (newEventChild != null) {\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                }\n                else {\n                    // no complete child available or no change\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n        }\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n    }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    const oldServerSnap = oldViewCache.serverCache;\n    let newServerCache;\n    const serverFilter = filterServerNode\n        ? viewProcessor.filter\n        : viewProcessor.filter.getIndexedFilter();\n    if (pathIsEmpty(changePath)) {\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    }\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n        const newServerNode = oldServerSnap\n            .getNode()\n            .updateChild(changePath, changedSnap);\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\n            pathGetLength(changePath) > 1) {\n            // We don't update incomplete nodes with updates intended for other listeners\n            return oldViewCache;\n        }\n        const childChangePath = pathPopFront(changePath);\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n        if (childKey === '.priority') {\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n        }\n        else {\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n        }\n    }\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    const oldEventSnap = oldViewCache.eventCache;\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n    if (pathIsEmpty(changePath)) {\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (childKey === '.priority') {\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n        }\n        else {\n            const childChangePath = pathPopFront(changePath);\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            let newChild;\n            if (pathIsEmpty(childChangePath)) {\n                // Child overwrite, we can replace the child\n                newChild = changedSnap;\n            }\n            else {\n                const childNode = source.getCompleteChild(childKey);\n                if (childNode != null) {\n                    if (pathGetBack(childChangePath) === '.priority' &&\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n                        // This is a priority update on an empty node. If this node exists on the server, the\n                        // server will send down the priority in the update, so ignore for now\n                        newChild = childNode;\n                    }\n                    else {\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\n                    }\n                }\n                else {\n                    // There is no complete child node available\n                    newChild = ChildrenNode.EMPTY_NODE;\n                }\n            }\n            if (!oldChild.equals(newChild)) {\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n            }\n            else {\n                newViewCache = oldViewCache;\n            }\n        }\n    }\n    return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n    return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n    merge.foreach((relativePath, childNode) => {\n        node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (viewCache.serverCache.getNode().isEmpty() &&\n        !viewCache.serverCache.isFullyInitialized()) {\n        return viewCache;\n    }\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (pathIsEmpty(path)) {\n        viewMergeTree = changedChildren;\n    }\n    else {\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.serverCache.getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n        if (serverNode.hasChild(childKey)) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\n            childMergeTree.value === null;\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n        return viewCache;\n    }\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.serverCache.isFiltered();\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.serverCache;\n    if (affectedTree.value != null) {\n        // This is an overwrite.\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n            serverCache.isCompleteForPath(ackPath)) {\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else if (pathIsEmpty(ackPath)) {\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n            // should just re-apply whatever we have in our cache as a merge.\n            let changedChildren = new ImmutableTree(null);\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n                changedChildren = changedChildren.set(new Path(name), node);\n            });\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else {\n            return viewCache;\n        }\n    }\n    else {\n        // This is a merge.\n        let changedChildren = new ImmutableTree(null);\n        affectedTree.foreach((mergePath, value) => {\n            const serverCachePath = pathChild(ackPath, mergePath);\n            if (serverCache.isCompleteForPath(serverCachePath)) {\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n            }\n        });\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n    const oldServerNode = viewCache.serverCache;\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n    let complete;\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n        return viewCache;\n    }\n    else {\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n        const oldEventCache = viewCache.eventCache.getNode();\n        let newEventCache;\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n            let newNode;\n            if (viewCache.serverCache.isFullyInitialized()) {\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n            }\n            else {\n                const serverChildren = viewCache.serverCache.getNode();\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n            }\n            newNode = newNode;\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n        }\n        else {\n            const childKey = pathGetFront(path);\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n            if (newChild == null &&\n                viewCache.serverCache.isCompleteForChild(childKey)) {\n                newChild = oldEventCache.getImmediateChild(childKey);\n            }\n            if (newChild != null) {\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n            }\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n                // No complete child available, delete the existing one, if any\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n            }\n            else {\n                newEventCache = oldEventCache;\n            }\n            if (newEventCache.isEmpty() &&\n                viewCache.serverCache.isFullyInitialized()) {\n                // We might have reverted all child writes. Maybe the old event was a leaf node\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                if (complete.isLeafNode()) {\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n                }\n            }\n        }\n        complete =\n            viewCache.serverCache.isFullyInitialized() ||\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nclass View {\n    constructor(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        const params = this.query_._queryParams;\n        const indexFilter = new IndexedFilter(params.getIndex());\n        const filter = queryParamsGetNodeFilter(params);\n        this.processor_ = newViewProcessor(filter);\n        const initialServerCache = initialViewCache.serverCache;\n        const initialEventCache = initialViewCache.eventCache;\n        // Don't filter server node with other filter than index, wait for tagged listen\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\n        this.eventGenerator_ = new EventGenerator(this.query_);\n    }\n    get query() {\n        return this.query_;\n    }\n}\nfunction viewGetServerCache(view) {\n    return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n    if (cache) {\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n        // we need to see if it contains the child we're interested in.\n        if (view.query._queryParams.loadsAllData() ||\n            (!pathIsEmpty(path) &&\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\n            return cache.getChild(path);\n        }\n    }\n    return null;\n}\nfunction viewIsEmpty(view) {\n    return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n    view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n    const cancelEvents = [];\n    if (cancelError) {\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n        const path = view.query._path;\n        view.eventRegistrations_.forEach(registration => {\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\n            if (maybeEvent) {\n                cancelEvents.push(maybeEvent);\n            }\n        });\n    }\n    if (eventRegistration) {\n        let remaining = [];\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n            const existing = view.eventRegistrations_[i];\n            if (!existing.matches(eventRegistration)) {\n                remaining.push(existing);\n            }\n            else if (eventRegistration.hasAnyCallback()) {\n                // We're removing just this one\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n                break;\n            }\n        }\n        view.eventRegistrations_ = remaining;\n    }\n    else {\n        view.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE &&\n        operation.source.queryId !== null) {\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n    }\n    const oldViewCache = view.viewCache_;\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    view.viewCache_ = result.viewCache;\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n    const eventSnap = view.viewCache_.eventCache;\n    const initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n        const eventNode = eventSnap.getNode();\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            initialChanges.push(changeChildAdded(key, childNode));\n        });\n    }\n    if (eventSnap.isFullyInitialized()) {\n        initialChanges.push(changeValue(eventSnap.getNode()));\n    }\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n    const registrations = eventRegistration\n        ? [eventRegistration]\n        : view.eventRegistrations_;\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nclass SyncPoint {\n    constructor() {\n        /**\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\n         * queryId and the value is the View for that query.\n         *\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n         */\n        this.views = new Map();\n    }\n}\nfunction syncPointSetReferenceConstructor(val) {\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n    referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n    return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n    return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n        const view = syncPoint.views.get(queryId);\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n    }\n    else {\n        let events = [];\n        for (const view of syncPoint.views.values()) {\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n        }\n        return events;\n    }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n    const queryId = query._queryIdentifier;\n    const view = syncPoint.views.get(queryId);\n    if (!view) {\n        // TODO: make writesCache take flag for complete server node\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n        let eventCacheComplete = false;\n        if (eventCache) {\n            eventCacheComplete = true;\n        }\n        else if (serverCache instanceof ChildrenNode) {\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n            eventCacheComplete = false;\n        }\n        else {\n            eventCache = ChildrenNode.EMPTY_NODE;\n            eventCacheComplete = false;\n        }\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n        return new View(query, viewCache);\n    }\n    return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n    if (!syncPoint.views.has(query._queryIdentifier)) {\n        syncPoint.views.set(query._queryIdentifier, view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    viewAddEventRegistration(view, eventRegistration);\n    return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n    const queryId = query._queryIdentifier;\n    const removed = [];\n    let cancelEvents = [];\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\n    if (queryId === 'default') {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(viewQueryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    else {\n        // remove the callback from the specific view.\n        const view = syncPoint.views.get(queryId);\n        if (view) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(queryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n        // We removed our last complete view.\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n    }\n    return { removed, events: cancelEvents };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n    const result = [];\n    for (const view of syncPoint.views.values()) {\n        if (!view.query._queryParams.loadsAllData()) {\n            result.push(view);\n        }\n    }\n    return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n    let serverCache = null;\n    for (const view of syncPoint.views.values()) {\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n    return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n    const params = query._queryParams;\n    if (params.loadsAllData()) {\n        return syncPointGetCompleteView(syncPoint);\n    }\n    else {\n        const queryId = query._queryIdentifier;\n        return syncPoint.views.get(queryId);\n    }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n    return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n    return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n    for (const view of syncPoint.views.values()) {\n        if (view.query._queryParams.loadsAllData()) {\n            return view;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\n    referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\n    return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nclass SyncTree {\n    /**\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    constructor(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         */\n        this.syncPointTree_ = new ImmutableTree(null);\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         */\n        this.pendingWriteTree_ = newWriteTree();\n        this.tagToQueryMap = new Map();\n        this.queryToTagMap = new Map();\n    }\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n    // Record pending write.\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n    if (!visible) {\n        return [];\n    }\n    else {\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n    }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n    // Record pending merge.\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n    if (!needToReevaluate) {\n        return [];\n    }\n    else {\n        let affectedTree = new ImmutableTree(null);\n        if (write.snap != null) {\n            // overwrite\n            affectedTree = affectedTree.set(newEmptyPath(), true);\n        }\n        else {\n            each(write.children, (pathString) => {\n                affectedTree = affectedTree.set(new Path(pathString), true);\n            });\n        }\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n    }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query._path;\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n    let cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint &&\n        (query._queryIdentifier === 'default' ||\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n        if (syncPointIsEmpty(maybeSyncPoint)) {\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n        }\n        const removed = removedAndEvents.removed;\n        cancelEvents = removedAndEvents.events;\n        if (!skipListenerDedup) {\n            /**\n             * We may have just removed one of many listeners and can short-circuit this whole process\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n             * properly set up.\n             */\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            const removingDefault = -1 !==\n                removed.findIndex(query => {\n                    return query._queryParams.loadsAllData();\n                });\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n            if (removingDefault && !covered) {\n                const subtree = syncTree.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (let i = 0; i < newViews.length; ++i) {\n                        const view = newViews[i], newQuery = view.query;\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                // Otherwise there's nothing below us, so nothing we need to start listening on\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    const defaultTag = null;\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach((queryToRemove) => {\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n        }\n        // Now, clear all of the tags we're tracking for the removed listens\n        syncTreeRemoveTags_(syncTree, removed);\n    }\n    return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey != null) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // Query must have been removed already\n        return [];\n    }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const changeTree = ImmutableTree.fromObject(changedChildren);\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n    const path = query._path;\n    let serverCache = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let serverCacheComplete;\n    if (serverCache != null) {\n        serverCacheComplete = true;\n    }\n    else {\n        serverCacheComplete = false;\n        serverCache = ChildrenNode.EMPTY_NODE;\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        subtree.foreachChild((childName, childSyncPoint) => {\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n            if (completeCache) {\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\n            }\n        });\n    }\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n        // We need to track a tag for this query\n        const queryKey = syncTreeMakeQueryKey_(query);\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n        const tag = syncTreeGetNextQueryTag_();\n        syncTree.queryToTagMap.set(queryKey, tag);\n        syncTree.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n        const view = syncPointViewForQuery(syncPoint, query);\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n    }\n    return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n    const includeHiddenSets = true;\n    const writeTree = syncTree.pendingWriteTree_;\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n        const relativePath = newRelativePath(pathSoFar, path);\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n        if (serverCache) {\n            return serverCache;\n        }\n    });\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n    const path = query._path;\n    let serverCache = null;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    const serverCacheComplete = serverCache != null;\n    const serverCacheNode = serverCacheComplete\n        ? new CacheNode(serverCache, true, false)\n        : null;\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n    return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n    if (pathIsEmpty(operation.path)) {\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    }\n    else {\n        const syncPoint = syncPointTree.get(newEmptyPath());\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n        }\n        let events = [];\n        const childName = pathGetFront(operation.path);\n        const childOperation = operation.operationForChild(childName);\n        const childTree = syncPointTree.children.get(childName);\n        if (childTree && childOperation) {\n            const childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n        if (syncPoint) {\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n        }\n        return events;\n    }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n        const childServerCache = serverCache\n            ? serverCache.getImmediateChild(childName)\n            : null;\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\n        const childOperation = operation.operationForChild(childName);\n        if (childOperation) {\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n    });\n    if (syncPoint) {\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n    const query = view.query;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    return {\n        hashFn: () => {\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n            return cache.hash();\n        },\n        onComplete: (status) => {\n            if (status === 'ok') {\n                if (tag) {\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n                }\n                else {\n                    return syncTreeApplyListenComplete(syncTree, query._path);\n                }\n            }\n            else {\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                const error = errorForServerCode(status, query);\n                return syncTreeRemoveEventRegistration(syncTree, query, \n                /*eventRegistration*/ null, error);\n            }\n        }\n    };\n}\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n    const queryKey = syncTreeMakeQueryKey_(query);\n    return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query) {\n    return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n    return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n    const splitIndex = queryKey.indexOf('$');\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n        queryId: queryKey.substr(splitIndex + 1),\n        path: new Path(queryKey.substr(0, splitIndex))\n    };\n}\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n            return [completeView];\n        }\n        else {\n            // No complete view here, flatten any deeper listens into an array\n            let views = [];\n            if (maybeChildSyncPoint) {\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\n            }\n            each(childMap, (_key, childViews) => {\n                views = views.concat(childViews);\n            });\n            return views;\n        }\n    });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query) {\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n        // We treat queries that load all data as default queries\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n        // from Query\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n    }\n    else {\n        return query;\n    }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n    for (let j = 0; j < queries.length; ++j) {\n        const removedQuery = queries[j];\n        if (!removedQuery._queryParams.loadsAllData()) {\n            // We should have a tag for this\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n            syncTree.queryToTagMap.delete(removedQueryKey);\n            syncTree.tagToQueryMap.delete(removedQueryTag);\n        }\n    }\n}\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_() {\n    return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n    const path = query._path;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n    }\n    else {\n        // Shadow everything at or below this location, this is a default listener.\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n            if (!pathIsEmpty(relativePath) &&\n                maybeChildSyncPoint &&\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n            }\n            else {\n                // No default listener here, flatten any deeper queries into an array\n                let queries = [];\n                if (maybeChildSyncPoint) {\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n                }\n                each(childMap, (_key, childQueries) => {\n                    queries = queries.concat(childQueries);\n                });\n                return queries;\n            }\n        });\n        for (let i = 0; i < queriesToStop.length; ++i) {\n            const queryToStop = queriesToStop[i];\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n        }\n    }\n    return events;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistingValueProvider {\n    constructor(node_) {\n        this.node_ = node_;\n    }\n    getImmediateChild(childName) {\n        const child = this.node_.getImmediateChild(childName);\n        return new ExistingValueProvider(child);\n    }\n    node() {\n        return this.node_;\n    }\n}\nclass DeferredValueProvider {\n    constructor(syncTree, path) {\n        this.syncTree_ = syncTree;\n        this.path_ = path;\n    }\n    getImmediateChild(childName) {\n        const childPath = pathChild(this.path_, childName);\n        return new DeferredValueProvider(this.syncTree_, childPath);\n    }\n    node() {\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n    }\n}\n/**\n * Generate placeholders for deferred values.\n */\nconst generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    if (typeof value['.sv'] === 'string') {\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n    }\n    else if (typeof value['.sv'] === 'object') {\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\n    }\n    else {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n    }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n    switch (op) {\n        case 'timestamp':\n            return serverValues['timestamp'];\n        default:\n            assert(false, 'Unexpected server value: ' + op);\n    }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n    if (!op.hasOwnProperty('increment')) {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n    }\n    const delta = op['increment'];\n    if (typeof delta !== 'number') {\n        assert(false, 'Unexpected increment value: ' + delta);\n    }\n    const existingNode = existing.node();\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n    // Incrementing a non-number sets the value to the incremented amount\n    if (!existingNode.isLeafNode()) {\n        return delta;\n    }\n    const leaf = existingNode;\n    const existingVal = leaf.getValue();\n    if (typeof existingVal !== 'number') {\n        return delta;\n    }\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n    return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n    const rawPri = node.getPriority().val();\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n    let newNode;\n    if (node.isLeafNode()) {\n        const leafNode = node;\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode(value, nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        const childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode(priority));\n        }\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nclass Tree {\n    /**\n     * @param name - Optional name of the node.\n     * @param parent - Optional parent node.\n     * @param node - Optional node to wrap.\n     */\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\n        this.name = name;\n        this.parent = parent;\n        this.node = node;\n    }\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nfunction treeSubTree(tree, pathObj) {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = tree, next = pathGetFront(path);\n    while (next !== null) {\n        const childNode = safeGet(child.node.children, next) || {\n            children: {},\n            childCount: 0\n        };\n        child = new Tree(next, child, childNode);\n        path = pathPopFront(path);\n        next = pathGetFront(path);\n    }\n    return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nfunction treeGetValue(tree) {\n    return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nfunction treeSetValue(tree, value) {\n    tree.node.value = value;\n    treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\nfunction treeHasChildren(tree) {\n    return tree.node.childCount > 0;\n}\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nfunction treeIsEmpty(tree) {\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nfunction treeForEachChild(tree, action) {\n    each(tree.node.children, (child, childTree) => {\n        action(new Tree(child, tree, childTree));\n    });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n        action(tree);\n    }\n    treeForEachChild(tree, child => {\n        treeForEachDescendant(child, action, true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) {\n        action(tree);\n    }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n    let node = includeSelf ? tree : tree.parent;\n    while (node !== null) {\n        if (action(node)) {\n            return true;\n        }\n        node = node.parent;\n    }\n    return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\nfunction treeGetPath(tree) {\n    return new Path(tree.parent === null\n        ? tree.name\n        : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents(tree) {\n    if (tree.parent !== null) {\n        treeUpdateChild(tree.parent, tree.name, tree);\n    }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild(tree, childName, child) {\n    const childEmpty = treeIsEmpty(child);\n    const childExists = contains(tree.node.children, childName);\n    if (childEmpty && childExists) {\n        delete tree.node.children[childName];\n        tree.node.childCount--;\n        treeUpdateParents(tree);\n    }\n    else if (!childEmpty && !childExists) {\n        tree.node.children[childName] = child.node;\n        tree.node.childCount++;\n        treeUpdateParents(tree);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * True for invalid Firebase keys\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\n};\nconst isValidPathString = function (pathString) {\n    return (typeof pathString === 'string' &&\n        pathString.length !== 0 &&\n        !INVALID_PATH_REGEX_.test(pathString));\n};\nconst isValidRootPathString = function (pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n    return (priority === null ||\n        typeof priority === 'string' ||\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n        (priority &&\n            typeof priority === 'object' &&\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            contains(priority, '.sv')));\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n    if (optional && value === undefined) {\n        return;\n    }\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix +\n            'contains a function ' +\n            validationPathToErrorString(path) +\n            ' with contents = ' +\n            data.toString());\n    }\n    if (isInvalidJSONNumber(data)) {\n        throw new Error(errorPrefix +\n            'contains ' +\n            data.toString() +\n            ' ' +\n            validationPathToErrorString(path));\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' &&\n        data.length > MAX_LEAF_SIZE_ / 3 &&\n        stringLength(data) > MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix +\n            'contains a string greater than ' +\n            MAX_LEAF_SIZE_ +\n            ' utf8 bytes ' +\n            validationPathToErrorString(path) +\n            \" ('\" +\n            data.substring(0, 50) +\n            \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && typeof data === 'object') {\n        let hasDotValue = false;\n        let hasActualChild = false;\n        each(data, (key, value) => {\n            if (key === '.value') {\n                hasDotValue = true;\n            }\n            else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild = true;\n                if (!isValidKey(key)) {\n                    throw new Error(errorPrefix +\n                        ' contains an invalid key (' +\n                        key +\n                        ') ' +\n                        validationPathToErrorString(path) +\n                        '.  Keys must be non-empty strings ' +\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            validationPathPush(path, key);\n            validateFirebaseData(errorPrefix, value, path);\n            validationPathPop(path);\n        });\n        if (hasDotValue && hasActualChild) {\n            throw new Error(errorPrefix +\n                ' contains \".value\" child ' +\n                validationPathToErrorString(path) +\n                ' in addition to actual children.');\n        }\n    }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n    let i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        const keys = pathSlice(curPath);\n        for (let j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\n            else if (!isValidKey(keys[j])) {\n                throw new Error(errorPrefix +\n                    'contains an invalid key (' +\n                    keys[j] +\n                    ') in path ' +\n                    curPath.toString() +\n                    '. Keys must be non-empty strings ' +\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(pathCompare);\n    let prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\n            throw new Error(errorPrefix +\n                'contains a path ' +\n                prevPath.toString() +\n                ' that is ancestor of another path ' +\n                curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n    if (optional && data === undefined) {\n        return;\n    }\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n    }\n    const mergePaths = [];\n    each(data, (key, value) => {\n        const curPath = new Path(key);\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n        if (pathGetBack(curPath) === '.priority') {\n            if (!isValidPriority(value)) {\n                throw new Error(errorPrefix$1 +\n                    \"contains an invalid value for '\" +\n                    curPath.toString() +\n                    \"', which must be a valid \" +\n                    'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n    if (optional && priority === undefined) {\n        return;\n    }\n    if (isInvalidJSONNumber(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'is ' +\n            priority.toString() +\n            ', but must be a valid Firebase priority (a string, finite number, ' +\n            'server value, or null).');\n    }\n    // Special case to allow importing data with a .sv.\n    if (!isValidPriority(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'must be a valid Firebase priority ' +\n            '(a string, finite number, server value, or null).');\n    }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n    if (optional && key === undefined) {\n        return;\n    }\n    if (!isValidKey(key)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid key = \"' +\n            key +\n            '\".  Firebase keys must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n    }\n};\n/**\n * @internal\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n    if (optional && pathString === undefined) {\n        return;\n    }\n    if (!isValidPathString(pathString)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid path = \"' +\n            pathString +\n            '\". Paths must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\nconst validateWritablePath = function (fnName, path) {\n    if (pathGetFront(path) === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n    // TODO = Validate server better.\n    const pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\n        parsedUrl.repoInfo.host.length === 0 ||\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\n        throw new Error(errorPrefix(fnName, 'url') +\n            'must be a valid firebase URL and ' +\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nclass EventQueue {\n    constructor() {\n        this.eventLists_ = [];\n        /**\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n         */\n        this.recursionDepth_ = 0;\n    }\n}\n/**\n * @param eventDataList - The new events to queue.\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n        const data = eventDataList[i];\n        const path = data.getPath();\n        if (currList !== null && !pathEquals(path, currList.path)) {\n            eventQueue.eventLists_.push(currList);\n            currList = null;\n        }\n        if (currList === null) {\n            currList = { events: [], path };\n        }\n        currList.events.push(data);\n    }\n    if (currList) {\n        eventQueue.eventLists_.push(currList);\n    }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\n        pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n    eventQueue.recursionDepth_++;\n    let sentAll = true;\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n        const eventList = eventQueue.eventLists_[i];\n        if (eventList) {\n            const eventPath = eventList.path;\n            if (predicate(eventPath)) {\n                eventListRaise(eventQueue.eventLists_[i]);\n                eventQueue.eventLists_[i] = null;\n            }\n            else {\n                sentAll = false;\n            }\n        }\n    }\n    if (sentAll) {\n        eventQueue.eventLists_ = [];\n    }\n    eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList) {\n    for (let i = 0; i < eventList.events.length; i++) {\n        const eventData = eventList.events[i];\n        if (eventData !== null) {\n            eventList.events[i] = null;\n            const eventFn = eventData.getEventRunner();\n            if (logger) {\n                log('event: ' + eventData.toString());\n            }\n            exceptionGuard(eventFn);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\nclass Repo {\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n        this.repoInfo_ = repoInfo_;\n        this.forceRestClient_ = forceRestClient_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckProvider_ = appCheckProvider_;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        /** A list of data pieces and paths to be set when this client disconnects. */\n        this.onDisconnect_ = newSparseSnapshotTree();\n        /** Stores queues of outstanding transactions for Firebase locations. */\n        this.transactionQueueTree_ = new Tree();\n        // TODO: This should be @private but it's used by test_access.js and internal.js\n        this.persistentConnection_ = null;\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\n        this.key = this.repoInfo_.toURLString();\n    }\n    /**\n     * @returns The URL corresponding to the root of this Firebase.\n     */\n    toString() {\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\n    }\n}\nfunction repoStart(repo, appId, authOverride) {\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n    if (repo.forceRestClient_ || beingCrawled()) {\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n    }\n    else {\n        // Validate authOverride\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\n            if (typeof authOverride !== 'object') {\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n            }\n            try {\n                stringify(authOverride);\n            }\n            catch (e) {\n                throw new Error('Invalid authOverride provided: ' + e);\n            }\n        }\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, (connectStatus) => {\n            repoOnConnectStatus(repo, connectStatus);\n        }, (updates) => {\n            repoOnServerInfoUpdate(repo, updates);\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n        repo.server_ = repo.persistentConnection_;\n    }\n    repo.authTokenProvider_.addTokenChangeListener(token => {\n        repo.server_.refreshAuthToken(token);\n    });\n    repo.appCheckProvider_.addTokenChangeListener(result => {\n        repo.server_.refreshAppCheckToken(result.token);\n    });\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n    // Used for .info.\n    repo.infoData_ = new SnapshotHolder();\n    repo.infoSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            let infoEvents = [];\n            const node = repo.infoData_.getNode(query._path);\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n            // on initial data...\n            if (!node.isEmpty()) {\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n                setTimeout(() => {\n                    onComplete('ok');\n                }, 0);\n            }\n            return infoEvents;\n        },\n        stopListening: () => { }\n    });\n    repoUpdateInfo(repo, 'connected', false);\n    repo.serverSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n                const events = onComplete(status, data);\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n            });\n            // No synchronous events for network-backed sync trees\n            return [];\n        },\n        stopListening: (query, tag) => {\n            repo.server_.unlisten(query, tag);\n        }\n    });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nfunction repoServerTime(repo) {\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    const offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nfunction repoGenerateServerValues(repo) {\n    return generateWithValues({\n        timestamp: repoServerTime(repo)\n    });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n    // For testing.\n    repo.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = repo.interceptServerDataCallback_\n        ? repo.interceptServerDataCallback_(pathString, data)\n        : data;\n    let events = [];\n    if (tag) {\n        if (isMerge) {\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n        }\n        else {\n            const taggedSnap = nodeFromJSON(data);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n        }\n    }\n    else if (isMerge) {\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n    }\n    else {\n        const snap = nodeFromJSON(data);\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n        // Since we have a listener outstanding for each transaction, receiving any events\n        // is a proxy for some change having occurred.\n        affectedPath = repoRerunTransactions(repo, path);\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n    repoUpdateInfo(repo, 'connected', connectStatus);\n    if (connectStatus === false) {\n        repoRunOnDisconnectEvents(repo);\n    }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n    each(updates, (key, value) => {\n        repoUpdateInfo(repo, key, value);\n    });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    repo.infoData_.updateSnapshot(path, newNode);\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n    return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n    if (cached != null) {\n        return Promise.resolve(cached);\n    }\n    return repo.server_.get(query).then(payload => {\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n        /**\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n         * Add an event registration,\n         * Update data at the path,\n         * Raise any events,\n         * Cleanup the SyncTree\n         */\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n        let events;\n        if (query._queryParams.loadsAllData()) {\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n        }\n        else {\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n        }\n        /*\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n         * ensure the corresponding child events will get fired.\n         */\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n        return node;\n    }, err => {\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err));\n    });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n    repoLog(repo, 'set', {\n        path: path.toString(),\n        value: newVal,\n        priority: newPriority\n    });\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n            warn('set at ' + path + ' failed: ' + status);\n        }\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = repoGenerateServerValues(repo);\n    const changedChildren = {};\n    each(childrenToMerge, (changedKey, changedValue) => {\n        empty = false;\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n    });\n    if (!empty) {\n        const writeId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n        eventQueueQueueEvents(repo.eventQueue_, events);\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n            const success = status === 'ok';\n            if (!success) {\n                warn('update at ' + path + ' failed: ' + status);\n            }\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n        });\n        each(childrenToMerge, (changedPath) => {\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n            repoRerunTransactions(repo, affectedPath);\n        });\n        // We queued the events above, so just flush the queue here\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n    }\n    else {\n        log(\"update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo) {\n    repoLog(repo, 'onDisconnectEvents');\n    const serverValues = repoGenerateServerValues(repo);\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    });\n    let events = [];\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n        const affectedPath = repoAbortTransactions(repo, path);\n        repoRerunTransactions(repo, affectedPath);\n    });\n    repo.onDisconnect_ = newSparseSnapshotTree();\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n    const newNode = nodeFromJSON(value);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n    const newNode = nodeFromJSON(value, priority);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n    if (isEmpty(childrenToMerge)) {\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n        return;\n    }\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n        if (status === 'ok') {\n            each(childrenToMerge, (childName, childNode) => {\n                const newChildNode = nodeFromJSON(childNode);\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n            });\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n}\nfunction repoResume(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n}\nfunction repoLog(repo, ...varArgs) {\n    let prefix = '';\n    if (repo.persistentConnection_) {\n        prefix = repo.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n    if (callback) {\n        exceptionGuard(() => {\n            if (status === 'ok') {\n                callback(null);\n            }\n            else {\n                const code = (status || 'error').toUpperCase();\n                let message = code;\n                if (errorReason) {\n                    message += ': ' + errorReason;\n                }\n                const error = new Error(message);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.code = code;\n                callback(error);\n            }\n        });\n    }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n    repoLog(repo, 'transaction on ' + path);\n    // Initialize transaction.\n    const transaction = {\n        path,\n        update: transactionUpdate,\n        onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out\n        // which one goes first.\n        order: LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    const currentState = repoGetLatestState(repo, path, undefined);\n    transaction.currentInputSnapshot = currentState;\n    const newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\n        }\n    }\n    else {\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = 0 /* TransactionStatus.RUN */;\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n        const nodeQueue = treeGetValue(queueNode) || [];\n        nodeQueue.push(transaction);\n        treeSetValue(queueNode, nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our\n        // transaction state, since the user could start new transactions from the\n        // event callbacks.\n        let priorityForNode;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            contains(newVal, '.priority')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            priorityForNode = safeGet(newVal, '.priority');\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n                ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        const serverValues = repoGenerateServerValues(repo);\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n    }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n        ChildrenNode.EMPTY_NODE);\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        repoPruneCompletedTransactionsBelowNode(repo, node);\n    }\n    if (treeGetValue(node)) {\n        const queue = repoBuildTransactionQueue(repo, node);\n        assert(queue.length > 0, 'Sending zero length transaction queue');\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\n        }\n    }\n    else if (treeHasChildren(node)) {\n        treeForEachChild(node, childNode => {\n            repoSendReadyTransactions(repo, childNode);\n        });\n    }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n    // Mark transactions as sent and increment retry count!\n    const setsToIgnore = queue.map(txn => {\n        return txn.currentWriteId;\n    });\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\n    let snapToSend = latestState;\n    const latestHash = latestState.hash();\n    for (let i = 0; i < queue.length; i++) {\n        const txn = queue[i];\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = 1 /* TransactionStatus.SENT */;\n        txn.retryCount++;\n        const relativePath = newRelativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    const dataToSend = snapToSend.val(true);\n    const pathToSend = path;\n    // Send the put.\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\n        repoLog(repo, 'transaction put response', {\n            path: pathToSend.toString(),\n            status\n        });\n        let events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our\n            // transaction state, since the callback could trigger more\n            // transactions or sets.\n            const callbacks = [];\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this\n                    // transaction is complete, it should be set\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n            // There may be pending transactions that we can now send.\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n            // Finally, trigger onComplete callbacks.\n            for (let i = 0; i < callbacks.length; i++) {\n                exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (let i = 0; i < queue.length; i++) {\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    }\n                    else {\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\n                    }\n                }\n            }\n            else {\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (let i = 0; i < queue.length; i++) {\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    queue[i].abortReason = status;\n                }\n            }\n            repoRerunTransactions(repo, path);\n        }\n    }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo, changedPath) {\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n    const path = treeGetPath(rootMostTransactionNode);\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n    repoRerunTransactionQueue(repo, queue, path);\n    return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions or\n    // sets.\n    const callbacks = [];\n    let events = [];\n    // Ignore all of the sets we're going to re-run.\n    const txnsToRerun = queue.filter(q => {\n        return q.status === 0 /* TransactionStatus.RUN */;\n    });\n    const setsToIgnore = txnsToRerun.map(q => {\n        return q.currentWriteId;\n    });\n    for (let i = 0; i < queue.length; i++) {\n        const transaction = queue[i];\n        const relativePath = newRelativePath(path, transaction.path);\n        let abortTransaction = false, abortReason;\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                const newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    let newDataNode = nodeFromJSON(newData);\n                    const hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    const oldWriteId = transaction.currentWriteId;\n                    const serverValues = repoGenerateServerValues(repo);\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n                }\n            }\n        }\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n            // Removing a listener can trigger pruning which can muck with\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\n            // until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n                }\n                else {\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n    let front;\n    // Start at the root and walk deeper into the tree towards path until we\n    // find a node with pending transactions.\n    let transactionNode = repo.transactionQueueTree_;\n    front = pathGetFront(path);\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\n        transactionNode = treeSubTree(transactionNode, front);\n        path = pathPopFront(path);\n        front = pathGetFront(path);\n    }\n    return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    const transactionQueue = [];\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort((a, b) => a.order - b.order);\n    return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n    const nodeQueue = treeGetValue(node);\n    if (nodeQueue) {\n        for (let i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    treeForEachChild(node, child => {\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\n    });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        let to = 0;\n        for (let from = 0; from < queue.length; from++) {\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\n    }\n    treeForEachChild(node, childNode => {\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\n    });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo, path) {\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n    treeForEachAncestor(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    repoAbortTransactionsOnNode(repo, transactionNode);\n    treeForEachDescendant(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more transactions\n        // or sets.\n        const callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for\n        // abort, while the unsent ones can be immediately aborted and removed.\n        let events = [];\n        let lastSent = -1;\n        for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            treeSetValue(node, undefined);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n        for (let i = 0; i < callbacks.length; i++) {\n            exceptionGuard(callbacks[i]);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction decodePath(pathString) {\n    let pathStringDecoded = '';\n    const pieces = pathString.split('/');\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            let piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            }\n            catch (e) { }\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString) {\n    const results = {};\n    if (queryString.charAt(0) === '?') {\n        queryString = queryString.substring(1);\n    }\n    for (const segment of queryString.split('&')) {\n        if (segment.length === 0) {\n            continue;\n        }\n        const kv = segment.split('=');\n        if (kv.length === 2) {\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n        }\n        else {\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n        }\n    }\n    return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\n    if (parsedUrl.domain === 'firebase.com') {\n        fatal(parsedUrl.host +\n            ' is no longer supported. ' +\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if ((!namespace || namespace === 'undefined') &&\n        parsedUrl.domain !== 'localhost') {\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        warnIfPageIsSecure();\n    }\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \n        /*persistenceKey=*/ '', \n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\n        path: new Path(parsedUrl.pathString)\n    };\n};\nconst parseDatabaseURL = function (dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\n    // Always default to SSL, unless otherwise specified.\n    let secure = true, scheme = 'https', port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        let colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host, path, and query string.\n        let slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        let questionMarkInd = dataURL.indexOf('?');\n        if (questionMarkInd === -1) {\n            questionMarkInd = dataURL.length;\n        }\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n        if (slashInd < questionMarkInd) {\n            // For pathString, questionMarkInd will always come after slashInd\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n        }\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n        else {\n            colonInd = host.length;\n        }\n        const hostWithoutPort = host.slice(0, colonInd);\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\n            domain = 'localhost';\n        }\n        else if (hostWithoutPort.split('.').length <= 2) {\n            domain = hostWithoutPort;\n        }\n        else {\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\n            const dotInd = host.indexOf('.');\n            subdomain = host.substring(0, dotInd).toLowerCase();\n            domain = host.substring(dotInd + 1);\n            // Normalize namespaces to lowercase to share storage / connection.\n            namespace = subdomain;\n        }\n        // Always treat the value of the `ns` as the namespace name if it is present.\n        if ('ns' in queryParams) {\n            namespace = queryParams['ns'];\n        }\n    }\n    return {\n        host,\n        port,\n        domain,\n        subdomain,\n        secure,\n        scheme,\n        pathString,\n        namespace\n    };\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nconst nextPushId = (function () {\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    let lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    const lastRandChars = [];\n    return function (now) {\n        const duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        let i;\n        const timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        assert(now === 0, 'Cannot push at time == 0');\n        let id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Encapsulates the data needed to raise an event\n */\nclass DataEvent {\n    /**\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n     * @param eventRegistration - The function to call to with the event data. User provided\n     * @param snapshot - The data backing the event\n     * @param prevName - Optional, the name of the previous child for child_* events.\n     */\n    constructor(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    getPath() {\n        const ref = this.snapshot.ref;\n        if (this.eventType === 'value') {\n            return ref._path;\n        }\n        else {\n            return ref.parent._path;\n        }\n    }\n    getEventType() {\n        return this.eventType;\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return (this.getPath().toString() +\n            ':' +\n            this.eventType +\n            ':' +\n            stringify(this.snapshot.exportVal()));\n    }\n}\nclass CancelEvent {\n    constructor(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    getPath() {\n        return this.path;\n    }\n    getEventType() {\n        return 'cancel';\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return this.path.toString() + ':cancel';\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nclass CallbackContext {\n    constructor(snapshotCallback, cancelCallback) {\n        this.snapshotCallback = snapshotCallback;\n        this.cancelCallback = cancelCallback;\n    }\n    onValue(expDataSnapshot, previousChildName) {\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n    }\n    onCancel(error) {\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n        return this.cancelCallback.call(null, error);\n    }\n    get hasCancelCallback() {\n        return !!this.cancelCallback;\n    }\n    matches(other) {\n        return (this.snapshotCallback === other.snapshotCallback ||\n            (this.snapshotCallback.userCallback !== undefined &&\n                this.snapshotCallback.userCallback ===\n                    other.snapshotCallback.userCallback &&\n                this.snapshotCallback.context === other.snapshotCallback.context));\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nclass OnDisconnect {\n    /** @hideconstructor */\n    constructor(_repo, _path) {\n        this._repo = _repo;\n        this._path = _path;\n    }\n    /**\n     * Cancels all previously queued `onDisconnect()` set or update events for this\n     * location and all children.\n     *\n     * If a write has been queued for this location via a `set()` or `update()` at a\n     * parent location, the write at this location will be canceled, though writes\n     * to sibling locations will still occur.\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    cancel() {\n        const deferred = new Deferred();\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is deleted when the client is disconnected\n     * (due to closing the browser, navigating to a new page, or network issues).\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    remove() {\n        validateWritablePath('OnDisconnect.remove', this._path);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value when the\n     * client is disconnected (due to closing the browser, navigating to a new page,\n     * or network issues).\n     *\n     * `set()` is especially useful for implementing \"presence\" systems, where a\n     * value should be changed or cleared when a user disconnects so that they\n     * appear \"offline\" to other users. See\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n     * for more information.\n     *\n     * Note that `onDisconnect` operations are only triggered once. If you want an\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\n     * the `onDisconnect` operations each time.\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    set(value) {\n        validateWritablePath('OnDisconnect.set', this._path);\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value and priority\n     * when the client is disconnected (due to closing the browser, navigating to a\n     * new page, or network issues).\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @param priority - The priority to be written (string, number, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    setWithPriority(value, priority) {\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Writes multiple values at this location when the client is disconnected (due\n     * to closing the browser, navigating to a new page, or network issues).\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\n     * from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * @param values - Object containing multiple values.\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    update(values) {\n        validateWritablePath('OnDisconnect.update', this._path);\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass QueryImpl {\n    /**\n     * @hideconstructor\n     */\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\n        this._repo = _repo;\n        this._path = _path;\n        this._queryParams = _queryParams;\n        this._orderByCalled = _orderByCalled;\n    }\n    get key() {\n        if (pathIsEmpty(this._path)) {\n            return null;\n        }\n        else {\n            return pathGetBack(this._path);\n        }\n    }\n    get ref() {\n        return new ReferenceImpl(this._repo, this._path);\n    }\n    get _queryIdentifier() {\n        const obj = queryParamsGetQueryObject(this._queryParams);\n        const id = ObjectToUniqueKey(obj);\n        return id === '{}' ? 'default' : id;\n    }\n    /**\n     * An object representation of the query parameters used by this Query.\n     */\n    get _queryObject() {\n        return queryParamsGetQueryObject(this._queryParams);\n    }\n    isEqual(other) {\n        other = getModularInstance(other);\n        if (!(other instanceof QueryImpl)) {\n            return false;\n        }\n        const sameRepo = this._repo === other._repo;\n        const samePath = pathEquals(this._path, other._path);\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n        return sameRepo && samePath && sameQueryIdentifier;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toString() {\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\n    }\n}\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n    if (query._orderByCalled === true) {\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n}\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n        startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n        endNode = params.getIndexEndValue();\n    }\n    if (params.getIndex() === KEY_INDEX) {\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\n            'startAt(), endAt(), or equalTo().';\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n            'endAt(), endBefore(), or equalTo() must be a string.';\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            if (startName !== MIN_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof startNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            if (endName !== MAX_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof endNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n    }\n    else if (params.getIndex() === PRIORITY_INDEX) {\n        if ((startNode != null && !isValidPriority(startNode)) ||\n            (endNode != null && !isValidPriority(endNode))) {\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n                '(null, a number, or a string).');\n        }\n    }\n    else {\n        assert(params.getIndex() instanceof PathIndex ||\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\n        if ((startNode != null && typeof startNode === 'object') ||\n            (endNode != null && typeof endNode === 'object')) {\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n                'equalTo() cannot be an object.');\n        }\n    }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params) {\n    if (params.hasStart() &&\n        params.hasEnd() &&\n        params.hasLimit() &&\n        !params.hasAnchoredLimit()) {\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n            'limitToFirst() or limitToLast() instead.');\n    }\n}\n/**\n * @internal\n */\nclass ReferenceImpl extends QueryImpl {\n    /** @hideconstructor */\n    constructor(repo, path) {\n        super(repo, path, new QueryParams(), false);\n    }\n    get parent() {\n        const parentPath = pathParent(this._path);\n        return parentPath === null\n            ? null\n            : new ReferenceImpl(this._repo, parentPath);\n    }\n    get root() {\n        let ref = this;\n        while (ref.parent !== null) {\n            ref = ref.parent;\n        }\n        return ref;\n    }\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nclass DataSnapshot {\n    /**\n     * @param _node - A SnapshotNode to wrap.\n     * @param ref - The location this snapshot came from.\n     * @param _index - The iteration order for this snapshot\n     * @hideconstructor\n     */\n    constructor(_node, \n    /**\n     * The location of this DataSnapshot.\n     */\n    ref, _index) {\n        this._node = _node;\n        this.ref = ref;\n        this._index = _index;\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n     * ).\n     */\n    get priority() {\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this._node.getPriority().val();\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return\n     * `null`.\n     */\n    get key() {\n        return this.ref.key;\n    }\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get size() {\n        return this._node.numChildren();\n    }\n    /**\n     * Gets another `DataSnapshot` for the location at the specified relative path.\n     *\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\n     * another `DataSnapshot` for the location at the specified relative path. The\n     * relative path can either be a simple child name (for example, \"ada\") or a\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n     * whose value is `null`) is returned.\n     *\n     * @param path - A relative path to the location of child data.\n     */\n    child(path) {\n        const childPath = new Path(path);\n        const childRef = child(this.ref, path);\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n    }\n    /**\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     */\n    exists() {\n        return !this._node.isEmpty();\n    }\n    /**\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    exportVal() {\n        return this._node.val(true);\n    }\n    /**\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\n     * where `forEach()` comes in handy. It guarantees the children of a\n     * `DataSnapshot` will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action - A function that will be called for each child DataSnapshot.\n     * The callback can return true to cancel further enumeration.\n     * @returns true if enumeration was canceled due to your callback returning\n     * true.\n     */\n    forEach(action) {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        const childrenNode = this._node;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n        });\n    }\n    /**\n     * Returns true if the specified child path has (non-null) data.\n     *\n     * @param path - A relative path to the location of a potential child.\n     * @returns `true` if data exists at the specified child path; else\n     *  `false`.\n     */\n    hasChild(path) {\n        const childPath = new Path(path);\n        return !this._node.getChild(childPath).isEmpty();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @returns true if this snapshot has any children; else false.\n     */\n    hasChildren() {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        else {\n            return !this._node.isEmpty();\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return this.exportVal();\n    }\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    val() {\n        return this._node.val();\n    }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nfunction ref(db, path) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('ref');\n    return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nfunction refFromURL(db, url) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('refFromURL');\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n    validateUrl('refFromURL', parsedURL);\n    const repoInfo = parsedURL.repoInfo;\n    if (!db._repo.repoInfo_.isCustomHost() &&\n        repoInfo.host !== db._repo.repoInfo_.host) {\n        fatal('refFromURL' +\n            ': Host name does not match the current database: ' +\n            '(found ' +\n            repoInfo.host +\n            ' but expected ' +\n            db._repo.repoInfo_.host +\n            ')');\n    }\n    return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nfunction child(parent, path) {\n    parent = getModularInstance(parent);\n    if (pathGetFront(parent._path) === null) {\n        validateRootPathString('child', 'path', path, false);\n    }\n    else {\n        validatePathString('child', 'path', path, false);\n    }\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nfunction onDisconnect(ref) {\n    ref = getModularInstance(ref);\n    return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nfunction push(parent, value) {\n    parent = getModularInstance(parent);\n    validateWritablePath('push', parent._path);\n    validateFirebaseDataArg('push', value, parent._path, true);\n    const now = repoServerTime(parent._repo);\n    const name = nextPushId(now);\n    // push() returns a ThennableReference whose promise is fulfilled with a\n    // regular Reference. We use child() to create handles to two different\n    // references. The first is turned into a ThennableReference below by adding\n    // then() and catch() methods and is used as the return value of push(). The\n    // second remains a regular Reference and is used as the fulfilled value of\n    // the first ThennableReference.\n    const thenablePushRef = child(parent, name);\n    const pushRef = child(parent, name);\n    let promise;\n    if (value != null) {\n        promise = set(pushRef, value).then(() => pushRef);\n    }\n    else {\n        promise = Promise.resolve(pushRef);\n    }\n    thenablePushRef.then = promise.then.bind(promise);\n    thenablePushRef.catch = promise.then.bind(promise, undefined);\n    return thenablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nfunction remove(ref) {\n    validateWritablePath('remove', ref._path);\n    return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction set(ref, value) {\n    ref = getModularInstance(ref);\n    validateWritablePath('set', ref._path);\n    validateFirebaseDataArg('set', value, ref._path, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, \n    /*priority=*/ null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setPriority(ref, priority) {\n    ref = getModularInstance(ref);\n    validateWritablePath('setPriority', ref._path);\n    validatePriority('setPriority', priority, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setWithPriority(ref, value, priority) {\n    validateWritablePath('setWithPriority', ref._path);\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n    validatePriority('setWithPriority', priority, false);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n    }\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nfunction update(ref, values) {\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\n    const deferred = new Deferred();\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nfunction get(query) {\n    query = getModularInstance(query);\n    const callbackContext = new CallbackContext(() => { });\n    const container = new ValueEventRegistration(callbackContext);\n    return repoGetValue(query._repo, query, container).then(node => {\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n    });\n}\n/**\n * Represents registration for 'value' events.\n */\nclass ValueEventRegistration {\n    constructor(callbackContext) {\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        return eventType === 'value';\n    }\n    createEvent(change, query) {\n        const index = query._queryParams.getIndex();\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\n        }\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    matches(other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        }\n        else if (!other.callbackContext || !this.callbackContext) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        }\n        else {\n            return other.callbackContext.matches(this.callbackContext);\n        }\n    }\n    hasAnyCallback() {\n        return this.callbackContext !== null;\n    }\n}\n/**\n * Represents the registration of a child_x event.\n */\nclass ChildEventRegistration {\n    constructor(eventType, callbackContext) {\n        this.eventType = eventType;\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck =\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return this.eventType === eventToCheck;\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    createEvent(change, query) {\n        assert(change.childName != null, 'Child events should have a childName.');\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n        const index = query._queryParams.getIndex();\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n        }\n    }\n    matches(other) {\n        if (other instanceof ChildEventRegistration) {\n            return (this.eventType === other.eventType &&\n                (!this.callbackContext ||\n                    !other.callbackContext ||\n                    this.callbackContext.matches(other.callbackContext)));\n        }\n        return false;\n    }\n    hasAnyCallback() {\n        return !!this.callbackContext;\n    }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n    let cancelCallback;\n    if (typeof cancelCallbackOrListenOptions === 'object') {\n        cancelCallback = undefined;\n        options = cancelCallbackOrListenOptions;\n    }\n    if (typeof cancelCallbackOrListenOptions === 'function') {\n        cancelCallback = cancelCallbackOrListenOptions;\n    }\n    if (options && options.onlyOnce) {\n        const userCallback = callback;\n        const onceCallback = (dataSnapshot, previousChildName) => {\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\n            userCallback(dataSnapshot, previousChildName);\n        };\n        onceCallback.userCallback = callback.userCallback;\n        onceCallback.context = callback.context;\n        callback = onceCallback;\n    }\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n    const container = eventType === 'value'\n        ? new ValueEventRegistration(callbackContext)\n        : new ChildEventRegistration(eventType, callbackContext);\n    repoAddEventCallbackForQuery(query._repo, query, container);\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nfunction off(query, eventType, callback) {\n    let container = null;\n    const expCallback = callback ? new CallbackContext(callback) : null;\n    if (eventType === 'value') {\n        container = new ValueEventRegistration(expCallback);\n    }\n    else if (eventType) {\n        container = new ChildEventRegistration(eventType, expCallback);\n    }\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint {\n}\nclass QueryEndAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nfunction endAt(value, key) {\n    validateKey('endAt', 'key', key, true);\n    return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endBefore';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction endBefore(value, key) {\n    validateKey('endBefore', 'key', key, true);\n    return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\n                'startBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAt(value = null, key) {\n    validateKey('startAt', 'key', key, true);\n    return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAfter';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\n                'startAfter, or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAfter(value, key) {\n    validateKey('startAfter', 'key', key, true);\n    return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToFirst';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToFirst(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToFirst: First argument must be a positive integer.');\n    }\n    return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToLast';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToLast(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToLast: First argument must be a positive integer.');\n    }\n    return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n    constructor(_path) {\n        super();\n        this._path = _path;\n        this.type = 'orderByChild';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByChild');\n        const parsedPath = new Path(this._path);\n        if (pathIsEmpty(parsedPath)) {\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n        }\n        const index = new PathIndex(parsedPath);\n        const newParams = queryParamsOrderBy(query._queryParams, index);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nfunction orderByChild(path) {\n    if (path === '$key') {\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n    }\n    else if (path === '$priority') {\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n    }\n    else if (path === '$value') {\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n    }\n    validatePathString('orderByChild', 'path', path, false);\n    return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByKey';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByKey');\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByKey() {\n    return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByPriority';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nfunction orderByPriority() {\n    return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByValue';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByValue');\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByValue() {\n    return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'equalTo';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\n        if (query._queryParams.hasStart()) {\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n                'equalTo).');\n        }\n        if (query._queryParams.hasEnd()) {\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n                'equalTo).');\n        }\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n    }\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction equalTo(value, key) {\n    validateKey('equalTo', 'key', key, true);\n    return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nfunction query(query, ...queryConstraints) {\n    let queryImpl = getModularInstance(query);\n    for (const constraint of queryConstraints) {\n        queryImpl = constraint._apply(queryImpl);\n    }\n    return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \n    /*isUsingEmulator=*/ true);\n    if (tokenProvider) {\n        repo.authTokenProvider_ = tokenProvider;\n    }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n    let dbUrl = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n        if (!app.options.projectId) {\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\n                ' a Project ID when calling firebase.initializeApp().');\n        }\n        log('Using default host for project ', app.options.projectId);\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n    let isEmulator;\n    let dbEmulatorHost = undefined;\n    if (typeof process !== 'undefined' && process.env) {\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n        isEmulator = true;\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n        repoInfo = parsedUrl.repoInfo;\n    }\n    else {\n        isEmulator = !parsedUrl.repoInfo.secure;\n    }\n    const authTokenProvider = nodeAdmin && isEmulator\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\n    if (!pathIsEmpty(parsedUrl.path)) {\n        fatal('Database URL must point to the root of a Firebase Database ' +\n            '(not including a child path).');\n    }\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n    return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n    const appRepos = repos[appName];\n    // This should never happen...\n    if (!appRepos || appRepos[repo.key] !== repo) {\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n    }\n    repoInterrupt(repo);\n    delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n    let appRepos = repos[app.name];\n    if (!appRepos) {\n        appRepos = {};\n        repos[app.name] = appRepos;\n    }\n    let repo = appRepos[repoInfo.toURLString()];\n    if (repo) {\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n    useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\nclass Database {\n    /** @hideconstructor */\n    constructor(_repoInternal, \n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    app) {\n        this._repoInternal = _repoInternal;\n        this.app = app;\n        /** Represents a `Database` instance. */\n        this['type'] = 'database';\n        /** Track if the instance has been used (root or repo accessed) */\n        this._instanceStarted = false;\n    }\n    get _repo() {\n        if (!this._instanceStarted) {\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n            this._instanceStarted = true;\n        }\n        return this._repoInternal;\n    }\n    get _root() {\n        if (!this._rootInternal) {\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n        }\n        return this._rootInternal;\n    }\n    _delete() {\n        if (this._rootInternal !== null) {\n            repoManagerDeleteRepo(this._repo, this.app.name);\n            this._repoInternal = null;\n            this._rootInternal = null;\n        }\n        return Promise.resolve();\n    }\n    _checkNotDeleted(apiName) {\n        if (this._rootInternal === null) {\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    }\n}\nfunction checkTransportInit() {\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n    }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\nfunction forceWebSockets() {\n    checkTransportInit();\n    BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nfunction forceLongPolling() {\n    checkTransportInit();\n    WebSocketConnection.forceDisallow();\n    BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nfunction getDatabase(app = getApp(), url) {\n    const db = _getProvider(app, 'database').getImmediate({\n        identifier: url\n    });\n    if (!db._instanceStarted) {\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\n        if (emulator) {\n            connectDatabaseEmulator(db, ...emulator);\n        }\n    }\n    return db;\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('useEmulator');\n    if (db._instanceStarted) {\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\n    }\n    const repo = db._repoInternal;\n    let tokenProvider = undefined;\n    if (repo.repoInfo_.nodeAdmin) {\n        if (options.mockUserToken) {\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n        }\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n    }\n    else if (options.mockUserToken) {\n        const token = typeof options.mockUserToken === 'string'\n            ? options.mockUserToken\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n        tokenProvider = new EmulatorTokenProvider(token);\n    }\n    // Modify the repo to apply emulator settings\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nfunction goOffline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOffline');\n    repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nfunction goOnline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOnline');\n    repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n    enableLogging$1(logger, persistent);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerDatabase(variant) {\n    setSDKVersion(SDK_VERSION$1);\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    registerVersion(name, version, variant);\n    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n    registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SERVER_TIMESTAMP = {\n    '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nfunction serverTimestamp() {\n    return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nfunction increment(delta) {\n    return {\n        '.sv': {\n            'increment': delta\n        }\n    };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nclass TransactionResult {\n    /** @hideconstructor */\n    constructor(\n    /** Whether the transaction was successfully committed. */\n    committed, \n    /** The resulting data snapshot. */\n    snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    /** Returns a JSON-serializable representation of this object. */\n    toJSON() {\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    }\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nfunction runTransaction(ref, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n    var _a;\n    ref = getModularInstance(ref);\n    validateWritablePath('Reference.transaction', ref._path);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\n    }\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n    const deferred = new Deferred();\n    const promiseComplete = (error, committed, node) => {\n        let dataSnapshot = null;\n        if (error) {\n            deferred.reject(error);\n        }\n        else {\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\n        }\n    };\n    // Add a watch to make sure we get server updates.\n    const unwatcher = onValue(ref, () => { });\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n    return deferred.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\n * @internal\n */\nconst hijackHash = function (newHash) {\n    const oldPut = PersistentConnection.prototype.put;\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        if (hash !== undefined) {\n            hash = newHash();\n        }\n        oldPut.call(this, pathString, data, onComplete, hash);\n    };\n    return function () {\n        PersistentConnection.prototype.put = oldPut;\n    };\n};\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nconst forceRestClient = function (forceRestClient) {\n    repoManagerForceRestClient(forceRestClient);\n};\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n * @internal\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAppCheckImpl - custom app check implementation\n * @param customAuthImpl - custom auth implementation\n */\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\n    setSDKVersion(version);\n    /**\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n     * any actual function.\n     */\n    const componentContainer = new ComponentContainer('database-standalone');\n    const authProvider = new Provider('auth-internal', componentContainer);\n    let appCheckProvider;\n    if (customAppCheckImpl) {\n        appCheckProvider = new Provider('app-check-internal', componentContainer);\n        appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    }\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\n}\n\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}